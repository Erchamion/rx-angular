{"version":3,"file":"key-compare-map.js","sourceRoot":"ng://@rx-angular/state/","sources":["lib/rxjs/interfaces/key-compare-map.ts"],"names":[],"mappings":"","sourcesContent":["import { CompareFn } from './compare-fn';\r\n\r\n/**\r\n * @description\r\n * The `KeyCompareMap` is used to configure custom comparison for defined keys. You can set the `CompareFn` to\r\n * `undefined` in order to utilize the default equality check.\r\n *\r\n * @example\r\n * const keyCompareMap = {\r\n *    myKey: (o, n) => customCompare(o, n),\r\n *    myOtherKey: undefined\r\n *  };\r\n *  const o$ = of({\r\n *    myKey: 5,\r\n *    myOtherKey: 'bar'\r\n *  }).pipe(distinctUntilSomeChanged(keyCompareMap));\r\n *\r\n *  //or\r\n *\r\n *  const o$ = of({\r\n *    myKey: 5,\r\n *    myOtherKey: 'bar'\r\n *  }).pipe(selectSlice(keyCompareMap));\r\n *\r\n * @docsPage interfaces\r\n * @docsCategory operators\r\n */\r\nexport type KeyCompareMap<T extends object> = {\r\n  [K in keyof T]?: CompareFn<T[K]>;\r\n};\r\n"]}