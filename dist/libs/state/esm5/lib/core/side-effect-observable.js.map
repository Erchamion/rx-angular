{"version":3,"file":"side-effect-observable.js","sourceRoot":"ng://@rx-angular/state/","sources":["lib/core/side-effect-observable.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,KAAK,EAEL,cAAc,EACd,OAAO,EAGR,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAErD,MAAM,UAAU,0BAA0B,CACxC,gBAA+C;IAA/C,iCAAA,EAAA,uBAAuB,OAAO,EAAiB;IAK/C,IAAM,QAAQ,GAAkB,KAAK,CACnC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,cAAc,CAAC,CAAC,CAC7D,CAAC;IAEF,SAAS,oBAAoB,CAAC,OAAsB;QAClD,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED,SAAS,SAAS;QAChB,OAAO,QAAQ,CAAC,SAAS,EAAE,CAAC;IAC9B,CAAC;IAED,OAAO;QACL,QAAQ,UAAA;QACR,oBAAoB,sBAAA;QACpB,SAAS,WAAA;KACV,CAAC;AACJ,CAAC","sourcesContent":["import {\r\n  merge,\r\n  Observable,\r\n  queueScheduler,\r\n  Subject,\r\n  Subscribable,\r\n  Subscription\r\n} from 'rxjs';\r\nimport { mergeAll, observeOn } from 'rxjs/operators';\r\n\r\nexport function createSideEffectObservable<T>(\r\n  stateObservables = new Subject<Observable<T>>()\r\n): {\r\n  effects$: Observable<T>;\r\n  nextEffectObservable: (effect$: Observable<T>) => void;\r\n} & Subscribable<T> {\r\n  const effects$: Observable<T> = merge(\r\n    stateObservables.pipe(mergeAll(), observeOn(queueScheduler))\r\n  );\r\n\r\n  function nextEffectObservable(effect$: Observable<T>): void {\r\n    stateObservables.next(effect$);\r\n  }\r\n\r\n  function subscribe(): Subscription {\r\n    return effects$.subscribe();\r\n  }\r\n\r\n  return {\r\n    effects$,\r\n    nextEffectObservable,\r\n    subscribe\r\n  };\r\n}\r\n"]}