{"version":3,"file":"global.strategy.js","sourceRoot":"ng://@rx-angular/template/","sources":["lib/render-strategies/strategies/global.strategy.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,IAAI,SAAS,EAAE,MAAM,eAAe,CAAC;AAMxD,MAAM,UAAU,mBAAmB,CACjC,MAAmC;IAEnC,OAAO;QACL,MAAM,EAAE,oBAAoB,CAAI,MAAM,CAAC;KACxC,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;GAeG;AAEH;;;;;;;;;;;;;;;GAeG;AACH,MAAM,UAAU,oBAAoB,CAClC,MAAmC;IAEnC,MAAM,YAAY,GAAG,GAAG,EAAE,CAAC,SAAS,CAAE,MAAM,CAAC,KAAa,CAAC,OAAO,CAAC,CAAC;IAEpE,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,YAAY;QACZ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAChB,UAAU,EAAE,GAAG,EAAE,CAAC,YAAY,EAAE;KACjC,CAAC;AACJ,CAAC","sourcesContent":["import { ɵmarkDirty as markDirty } from '@angular/core';\r\nimport {\r\n  RenderStrategy,\r\n  RenderStrategyFactoryConfig\r\n} from '../../core/render-aware/interfaces';\r\n\r\nexport function getGlobalStrategies<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): { [strategy: string]: RenderStrategy<T> } {\r\n  return {\r\n    global: createGlobalStrategy<T>(config)\r\n  };\r\n}\r\n\r\n/**\r\n * Strategies\r\n *\r\n * - VE/I - Options for ViewEngine / Ivy\r\n * - mFC - `cdRef.markForCheck`\r\n * - dC - `cdRef.detectChanges`\r\n * - ɵMD - `ɵmarkDirty`\r\n * - ɵDC - `ɵdetectChanges`\r\n * - LV  - `LView`\r\n * - C - `Component`\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------------- | ---------------- |\r\n * | `global`   | ❌/✔ ️        | mFC  / ɵMD          | ❌               |\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * Global Strategy\r\n *\r\n * This strategy is rendering the application root and\r\n * all it's children that are on a path\r\n * that is marked as dirty or has components with `ChangeDetectionStrategy.Default`.\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing       |\r\n * |-------------| --------------| ------------ ------ | ---------------- |\r\n * | `global`   | ❌/✔️       | mFC / ɵMD           | ❌                |\r\n *\r\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\r\n * @return {RenderStrategy<T>} - The calculated strategy\r\n *\r\n */\r\nexport function createGlobalStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const renderMethod = () => markDirty((config.cdRef as any).context);\r\n\r\n  return {\r\n    name: 'global',\r\n    renderMethod,\r\n    behavior: o => o,\r\n    scheduleCD: () => renderMethod()\r\n  };\r\n}\r\n"]}