{"version":3,"file":"zone-checks.js","sourceRoot":"ng://@rx-angular/template/","sources":["lib/core/utils/zone-checks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAElD;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,cAAc;IAC5B,OAAO,aAAa,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC;AAC5C,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,cAAc,CAAC,IAAY;IACzC,6CAA6C;IAC7C,OAAO,aAAa,EAAE,CAAC,iBAAiB,GAAG,IAAI,CAAC,KAAK,SAAS,CAAC;AACjE,CAAC;AAED,MAAM,kBAAkB,GAAG,IAAI,OAAO,EAAgB,CAAC;AAEvD;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,UAAU,QAAQ,CAAC,QAAa;IACpC,MAAM,WAAW,GAAG,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAErD,IAAI,WAAW,KAAK,SAAS,EAAE;QAC7B,OAAO,WAAW,CAAC;KACpB;IAED,IAAI,WAAW,GAAG,KAAK,CAAC;IAExB,SAAS,EAAE,KAAI,CAAC;IAChB,EAAE,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;IAEtC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;IAC/B,kBAAkB,CAAC,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAE9C,OAAO,WAAW,CAAC;AACrB,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,YAAY,CAAC,QAAa;IACxC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["import { getGlobalThis } from './get-global-this';\r\n\r\n/**\r\n * envZonePatched\r\n *\r\n * @description\r\n *\r\n * This function checks the window object `zone.js` was instantiated.\r\n * If so, the `window` object maintains a property named `Zone`.\r\n *\r\n * Here how Angular checks it: https://github.com/angular/angular/blob/master/packages/core/src/zone/ng_zone.ts#L123\r\n *\r\n * @return {boolean} - true if `zone.js` patched global APIs.\r\n *\r\n */\r\nexport function envZonePatched(): boolean {\r\n  return getGlobalThis().Zone !== undefined;\r\n}\r\n\r\n/**\r\n * apiZonePatched\r\n *\r\n * @description\r\n *\r\n * This function checks if a specific Browser API is patched by `zone.js`.\r\n *\r\n * @param name {string} - The name of the API to check.\r\n * @return {boolean} - true if `zone.js` patched the API in question.\r\n *\r\n */\r\nexport function apiZonePatched(name: string): boolean {\r\n  // if symbol is present, zone patched the API\r\n  return getGlobalThis()['__zone_symbol__' + name] !== undefined;\r\n}\r\n\r\nconst zoneDetectionCache = new WeakMap<any, boolean>();\r\n\r\n/**\r\n * isNgZone\r\n *\r\n * @description\r\n *\r\n * This function takes an instance of a class which implements the NgZone interface and checks if\r\n * its `runOutsideAngular()` function calls `apply()` on the function passed as parameter. This\r\n * means the Angular application that instantiated this service assumes it runs in a ZoneLess\r\n * environment, and therefore it's change detection will not be triggered by zone related logic.\r\n *\r\n * However, keep in mind this does not mean `zone.js` is not present.\r\n * The environment could still run in ZoneFull mode even if Angular turned it off.\r\n * Consider the situation of a Angular element configured for ZoneLess\r\n * environments is used in an Angular application relining on the zone mechanism.\r\n *\r\n * @param instance {Class Instance} - The instance to check for constructor name of `NgZone`.\r\n * @return {boolean} - true if instance is of type `NgZone`.\r\n *\r\n */\r\nexport function isNgZone(instance: any): boolean {\r\n  const cachedValue = zoneDetectionCache.get(instance);\r\n\r\n  if (cachedValue !== undefined) {\r\n    return cachedValue;\r\n  }\r\n\r\n  let calledApply = false;\r\n\r\n  function fn() {}\r\n  fn.apply = () => (calledApply = true);\r\n\r\n  instance.runOutsideAngular(fn);\r\n  zoneDetectionCache.set(instance, calledApply);\r\n\r\n  return calledApply;\r\n}\r\n\r\n/**\r\n * isNoopNgZone\r\n *\r\n *@description\r\n *\r\n * This function takes any instance of a class and checks\r\n * if the constructor name is equal to `NoopNgZone`.\r\n *\r\n * For more detailed information read the description of [isNgZone](#isngzone).\r\n *\r\n * @param instance {Class Instance} - The instance to check for constructor name of `NoopNgZone`.\r\n * @return {boolean} - true if instance is of type `NoopNgZone`.\r\n *\r\n */\r\nexport function isNoopNgZone(instance: any): boolean {\r\n  return !isNgZone(instance);\r\n}\r\n"]}