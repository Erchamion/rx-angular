{"version":3,"file":"properties-weakmap.js","sourceRoot":"ng://@rx-angular/template/","sources":["lib/core/utils/properties-weakmap.ts"],"names":[],"mappings":";AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BK;AACL,MAAM,UAAU,uBAAuB,CACrC,WAAwB;IAGxB,IAAM,WAAW,GAAG,IAAI,OAAO,EAAQ,CAAC;IAExC,OAAO;QACL,QAAQ,EAAE,aAAa;QACvB,QAAQ,EAAE,aAAa;KACxB,CAAC;IAEF,SAAS,aAAa,CAAC,GAAM;QAC3B,IAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QAClC,IAAM,iBAAiB,GAAkB,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9D,IAAI,UAAa,CAAC;QAElB,IAAI,iBAAiB,KAAK,SAAS,EAAE;YACnC,UAAU,GAAG,iBAAiB,CAAC;SAChC;aAAM;YACL,UAAU,GAAG,EAAO,CAAC;YAEpB,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAiB,CAAC,OAAO,CAC/C,UAAC,EAAa;oBAAb,kBAAa,EAAZ,YAAI,EAAE,aAAK;gBACX,UAAU,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAC3D,CAAC,CACF,CAAC;YAEF,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;SAClC;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,SAAS,aAAa,CAAC,GAAM,EAAE,KAAiB;QAC9C,IAAM,UAAU,GAAM,aAAa,CAAC,GAAG,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAiB,CAAC,OAAO,CAAC,UAAC,EAAa;gBAAb,kBAAa,EAAZ,YAAI,EAAE,aAAK;YAC1D,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QACjC,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,SAAS,MAAM,CAAC,GAAM,EAAE,QAAW;QACjC,OAAO,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;IAC/B,CAAC;AACH,CAAC","sourcesContent":["type KeyOf<O> = keyof O & string & symbol & number;\r\n\r\n/*\r\n * createPropertiesWeakMap\r\n *\r\n * @param getDefaults: (o: O) => P\r\n * Example:\r\n *\r\n * export interface Properties {\r\n *   isCoalescing: boolean;\r\n * }\r\n *\r\n * const obj: object = {\r\n *   foo: 'bar',\r\n *   isCoalescing: 'weakMap version'\r\n * };\r\n *\r\n * const getDefaults = (ctx: object): Properties => ({isCoalescing: false});\r\n * const propsMap = createPropertiesWeakMap<object, Properties>(getDefaults);\r\n *\r\n * console.log('obj before:', obj);\r\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\r\n * console.log('props before:', propsMap.getProps(obj));\r\n * // {isCoalescing: \"weakMap version\"}\r\n *\r\n * propsMap.setProps(obj, {isCoalescing: true});\r\n * console.log('obj after:', obj);\r\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\r\n * console.log('props after:', propsMap.getProps(obj));\r\n * // {isCoalescing: \"true\"}\r\n * */\r\nexport function createPropertiesWeakMap<O extends object, P extends object>(\r\n  getDefaults: (o: O) => P\r\n) {\r\n  type K = KeyOf<P>;\r\n  const propertyMap = new WeakMap<O, P>();\r\n\r\n  return {\r\n    getProps: getProperties,\r\n    setProps: setProperties\r\n  };\r\n\r\n  function getProperties(ctx: O): P {\r\n    const defaults = getDefaults(ctx);\r\n    const propertiesPresent: P | undefined = propertyMap.get(ctx);\r\n    let properties: P;\r\n\r\n    if (propertiesPresent !== undefined) {\r\n      properties = propertiesPresent;\r\n    } else {\r\n      properties = {} as P;\r\n\r\n      (Object.entries(defaults) as [K, P[K]][]).forEach(\r\n        ([prop, value]): void => {\r\n          properties[prop] = hasKey(ctx, prop) ? ctx[prop] : value;\r\n        }\r\n      );\r\n\r\n      propertyMap.set(ctx, properties);\r\n    }\r\n    return properties;\r\n  }\r\n\r\n  function setProperties(ctx: O, props: Partial<P>): P {\r\n    const properties: P = getProperties(ctx);\r\n    (Object.entries(props) as [K, P[K]][]).forEach(([prop, value]) => {\r\n      properties[prop] = value;\r\n    });\r\n    propertyMap.set(ctx, properties);\r\n    return properties;\r\n  }\r\n\r\n  function hasKey(ctx: O, property: K): ctx is K {\r\n    return ctx[property] != null;\r\n  }\r\n}\r\n"]}