{"version":3,"file":"make-zone-less.js","sourceRoot":"ng://@rx-angular/template/","sources":["lib/core/utils/make-zone-less.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/C;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,mBAAmB,CAAC,IAAY,EAAE,IAAU;IAC1D,IAAI,GAAG,IAAI,IAAI,aAAa,EAAE,CAAC;IAC/B,OAAO,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5E,CAAC;AAED;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,oBAAoB,CAAC,IAAiB,EAAE,KAAa;IACnE,IAAM,cAAc,GAAI,IAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC3D,2CAA2C;IAC3C,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO;KACR;IAED,IAAM,gBAAgB,GAAG,mBAAmB,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,IAAI,CACzE,IAAI,CACL,CAAC;IACF,cAAc,CAAC,OAAO,CAAC,UAAA,QAAQ;QAC7B,gDAAgD;QAChD,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC1C,wCAAwC;QACxC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { getGlobalThis } from './get-global-this';\r\nimport { apiZonePatched } from './zone-checks';\r\n\r\n/**\r\n * getZoneUnPatchedApi\r\n *\r\n * @description\r\n *\r\n * This function returns the zone un-patched API for the a specific Browser API.\r\n * If no element is passed the window is used instead\r\n *\r\n * @param name {string} - The name of the API to check.\r\n * @param elem {any} - The elem to get un-patched API from.\r\n * @return {Function} - The zone un-patched API in question.\r\n *\r\n */\r\nexport function getZoneUnPatchedApi(name: string, elem?: any): Function {\r\n  elem = elem || getGlobalThis();\r\n  return apiZonePatched(name) ? elem['__zone_symbol__' + name] : elem[name];\r\n}\r\n\r\n/**\r\n *\r\n * @description\r\n *\r\n * This function takes an elem and event and re-applies the listeners from the passed event to the\r\n * passed element with the zone un-patched version of it.\r\n *\r\n * @param elem {HTMLElement} - The elem to re-apply the listeners to.\r\n * @param event {string} - The name of the event from which to re-apply the listeners.\r\n *\r\n * @returns void\r\n */\r\nexport function unpatchEventListener(elem: HTMLElement, event: string): void {\r\n  const eventListeners = (elem as any).eventListeners(event);\r\n  // Return if no event listeners are present\r\n  if (!eventListeners) {\r\n    return;\r\n  }\r\n\r\n  const addEventListener = getZoneUnPatchedApi('addEventListener', elem).bind(\r\n    elem\r\n  );\r\n  eventListeners.forEach(listener => {\r\n    // Remove and reapply listeners with patched API\r\n    elem.removeEventListener(event, listener);\r\n    // Reapply listeners with un-patched API\r\n    addEventListener(event, listener);\r\n  });\r\n}\r\n"]}