{"version":3,"file":"coalesceWith.js","sourceRoot":"ng://@rx-angular/template/","sources":["lib/render-strategies/rxjs/operators/coalesceWith.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EAKV,YAAY,EAEb,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,qBAAqB,EAAE,MAAM,+CAA+C,CAAC;AAEtF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,MAAM,UAAU,YAAY,CAC1B,gBAAmC,EACnC,KAAc;IAEd,IAAM,MAAM,GAAG,KAAK,IAAI,EAAE,CAAC;IAC3B,OAAO,UAAA,MAAM;QACX,IAAM,EAAE,GAAG,IAAI,UAAU,CAAI,UAAA,QAAQ;YACnC,IAAM,gBAAgB,GAAG,IAAI,YAAY,EAAE,CAAC;YAC5C,gBAAgB,CAAC,GAAG,CAClB,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,CAClE,CAAC;YACF,OAAO,gBAAgB,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,CAAC;QAEV,SAAS,mBAAmB,CAC1B,aAA4B,EAC5B,gBAA8B;YAE9B,IAAI,kBAAkC,CAAC;YACvC,IAAI,WAA0B,CAAC;YAC/B,IAAM,GAAG,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;YAC1C,IAAM,kBAAkB,GAAG;gBACzB,GAAG,CAAC,MAAM,EAAE,CAAC;gBACb,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE;oBACvB,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBACjC;YACH,CAAC,CAAC;YACF,OAAO;gBACL,QAAQ,EAAE;oBACR,IAAI,kBAAkB,EAAE;wBACtB,kBAAkB,EAAE,CAAC;qBACtB;oBACD,aAAa,CAAC,QAAQ,EAAE,CAAC;gBAC3B,CAAC;gBACD,KAAK,EAAE,UAAA,KAAK,IAAI,OAAA,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,EAA1B,CAA0B;gBAC1C,IAAI,EAAE,UAAA,KAAK;oBACT,WAAW,GAAG,KAAK,CAAC;oBACpB,IAAI,CAAC,kBAAkB,EAAE;wBACvB,GAAG,CAAC,GAAG,EAAE,CAAC;wBACV,kBAAkB,GAAG,gBAAgB,CAAC,SAAS,CAAC;4BAC9C,IAAI,EAAE;gCACJ,kBAAkB,EAAE,CAAC;gCACrB,kBAAkB,GAAG,SAAS,CAAC;4BACjC,CAAC;4BACD,QAAQ,EAAE;gCACR,IAAI,kBAAkB,EAAE;oCACtB,kBAAkB,EAAE,CAAC;oCACrB,kBAAkB,GAAG,SAAS,CAAC;iCAChC;4BACH,CAAC;yBACF,CAAC,CAAC;wBACH,gBAAgB,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;qBAC1C;gBACH,CAAC;aACF,CAAC;QACJ,CAAC;IACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import {\r\n  MonoTypeOperatorFunction,\r\n  Observable,\r\n  Observer,\r\n  Subscribable,\r\n  SubscribableOrPromise,\r\n  Subscriber,\r\n  Subscription,\r\n  Unsubscribable\r\n} from 'rxjs';\r\nimport { createCoalesceManager } from '../../../core/render-aware/coalescing-manager';\r\n\r\n/**\r\n * @description\r\n * Limits the number of synchronous emitted a value from the source Observable to\r\n * one emitted value per\r\n *   [`AnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame), then repeats\r\n *   this process for every tick of the browsers event loop.\r\n *\r\n * The coalesce operator is based on the [throttle](https://rxjs-dev.firebaseapp.com/api/operators/throttle) operator.\r\n * In addition to that is provides emitted values for the trailing end only, as well as maintaining a context to scope\r\n *   coalescing.\r\n *\r\n * @param {function(value: T): SubscribableOrPromise} durationSelector - A function\r\n * that receives a value from the source Observable, for computing the silencing\r\n * duration for each source value, returned as an Observable or a Promise.\r\n * It defaults to `requestAnimationFrame` as durationSelector.\r\n * @param {Object} config - A configuration object to define `leading` and `trailing` behavior and the context object.\r\n * Defaults to `{ leading: false, trailing: true }`. The default scoping is per subscriber.\r\n * @return {Observable<T>} An Observable that performs the coalesce operation to\r\n * limit the rate of emissions from the source.\r\n *\r\n * @usageNotes\r\n * Emit clicks at a rate of at most one click per second\r\n * ```ts\r\n * import { fromEvent, animationFrames } from 'rxjs';\r\n * import { coalesce } from 'ngRx/component';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(coalesce(ev => animationFrames));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n */\r\nexport function coalesceWith<T>(\r\n  durationSelector: Subscribable<any>,\r\n  scope?: object\r\n): MonoTypeOperatorFunction<T> {\r\n  const _scope = scope || {};\r\n  return source => {\r\n    const o$ = new Observable<T>(observer => {\r\n      const rootSubscription = new Subscription();\r\n      rootSubscription.add(\r\n        source.subscribe(createInnerObserver(observer, rootSubscription))\r\n      );\r\n      return rootSubscription;\r\n    });\r\n\r\n    return o$;\r\n\r\n    function createInnerObserver(\r\n      outerObserver: Subscriber<T>,\r\n      rootSubscription: Subscription\r\n    ): Observer<T> {\r\n      let actionSubscription: Unsubscribable;\r\n      let latestValue: T | undefined;\r\n      const coa = createCoalesceManager(_scope);\r\n      const tryEmitLatestValue = () => {\r\n        coa.remove();\r\n        if (!coa.isCoalescing()) {\r\n          outerObserver.next(latestValue);\r\n        }\r\n      };\r\n      return {\r\n        complete: () => {\r\n          if (actionSubscription) {\r\n            tryEmitLatestValue();\r\n          }\r\n          outerObserver.complete();\r\n        },\r\n        error: error => outerObserver.error(error),\r\n        next: value => {\r\n          latestValue = value;\r\n          if (!actionSubscription) {\r\n            coa.add();\r\n            actionSubscription = durationSelector.subscribe({\r\n              next: () => {\r\n                tryEmitLatestValue();\r\n                actionSubscription = undefined;\r\n              },\r\n              complete: () => {\r\n                if (actionSubscription) {\r\n                  tryEmitLatestValue();\r\n                  actionSubscription = undefined;\r\n                }\r\n              }\r\n            });\r\n            rootSubscription.add(actionSubscription);\r\n          }\r\n        }\r\n      };\r\n    }\r\n  };\r\n}\r\n"]}