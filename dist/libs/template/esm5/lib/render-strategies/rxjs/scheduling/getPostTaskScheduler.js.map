{"version":3,"file":"getPostTaskScheduler.js","sourceRoot":"ng://@rx-angular/template/","sources":["lib/render-strategies/rxjs/scheduling/getPostTaskScheduler.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,cAAc,EAGd,YAAY,EACb,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,QAAQ,EAAE,MAAM,MAAM,CAAC;AAEhC;;;;GAIG;AAEH,MAAM,CAAN,IAAY,yBAIX;AAJD,WAAY,yBAAyB;IACnC,sDAAyB,CAAA;IACzB,2DAA8B,CAAA;IAC9B,yDAA4B,CAAA;AAC9B,CAAC,EAJW,yBAAyB,KAAzB,yBAAyB,QAIpC;AAYD,MAAM,CAAC,IAAM,iBAAiB,GAC5B,OAAO,MAAM,KAAK,WAAW;IAC3B,CAAC,CAAE,MAAc,CAAC,SAAS,IAAI;QAC3B,QAAQ,EAAR,UAAY,OAAiC;YAC3C,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACzB,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;gBACxB,UAAU,CAAC;oBACT,OAAO,CAAC,KAAK,CACX,sDAAsD,CACvD,CAAC;oBACF,OAAO,EAAE,CAAC;gBACZ,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,CAAC,CAAC,CAAC;QACL,CAAC;KACF;IACH,CAAC,CAAC,cAAO,CAAC,CAAC;AAEf;IAAgC,kCAAY;IAE1C,wBAAoB,IAAmD;QAAvE,YACE,iBAAO,SACR;QAFmB,UAAI,GAAJ,IAAI,CAA+C;;IAEvE,CAAC;IAED,iCAAQ,GAAR,UAAS,KAAS,EAAE,KAAc;QAChC,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,IAAI,CAAC;SACb;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC3D,CAAC;IACH,qBAAC;AAAD,CAAC,AAZD,CAAgC,YAAY,GAY3C;AAED,MAAM,UAAU,oBAAoB,CAClC,QAAmC;IAEnC,OAAQ;QACN,GAAG;YACD,OAAO,cAAc,CAAC,GAAG,EAAE,CAAC;QAC9B,CAAC;QACD,QAAQ,EAAR,UACE,IAAmD,EACnD,OAAkE,EAClE,KAAS;YADT,wBAAA,EAAA,UAAoC,EAA8B;YAGlE,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAK,OAAoC,CAAC,KAAK,EAAE;gBACpE,OAAO,cAAc,CAAC,QAAQ,CAC5B,IAAI,EACH,OAAoC,CAAC,KAAK,EAC3C,KAAK,CACN,CAAC;aACH;YAED,OAAO,yBAAQ,OAAO,KAAE,QAAQ,UAAA,GAAE,CAAC;YAEnC,IAAM,MAAM,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;YACxC,cAAc;YACd,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC;YAEzB,IAAM,OAAO,GAAG,iBAAiB;iBAC9B,QAAQ,CAAC,cAAO,CAAC,EAAE,OAAO,CAAC;iBAC3B,IAAI,CAAC;gBACJ,IAAI;oBACF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;iBAC1B;gBAAC,OAAO,KAAK,EAAE;oBACd,MAAM,CAAC,WAAW,EAAE,CAAC;oBACrB,MAAM,KAAK,CAAC;iBACb;YACH,CAAC,CAAC,CAAC;YACL,MAAM,CAAC,GAAG,CAAC;gBACT,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;YACH,OAAO,MAAM,CAAC;QAChB,CAAC;KAC2B,CAAC;AACjC,CAAC","sourcesContent":["import {\r\n  asyncScheduler,\r\n  SchedulerAction,\r\n  SchedulerLike,\r\n  Subscription\r\n} from 'rxjs';\r\nimport { isObject } from 'util';\r\n\r\n/**\r\n *\r\n * Implementation based on rxjs-etc => IdleScheduler\r\n *\r\n */\r\n\r\nexport enum PostTaskSchedulerPriority {\r\n  background = 'background',\r\n  userBlocking = 'user-blocking',\r\n  userVisible = 'user-visible'\r\n}\r\n\r\ninterface PostTaskScheduler {\r\n  postTask<T>(cb: () => void, options: SchedulerPostTaskOptions): Promise<T>;\r\n}\r\n\r\ninterface SchedulerPostTaskOptions {\r\n  priority: PostTaskSchedulerPriority | string | null;\r\n  delay: number;\r\n  signal?: any;\r\n}\r\n\r\nexport const postTaskScheduler: PostTaskScheduler =\r\n  typeof window !== 'undefined'\r\n    ? (window as any).scheduler || {\r\n        postTask<T>(options: SchedulerPostTaskOptions): Promise<T> {\r\n          const start = Date.now();\r\n          return new Promise(resolve => {\r\n            setTimeout(function() {\r\n              console.error(\r\n                'postTask not implemented. Use setTimeout as fallback'\r\n              );\r\n              resolve();\r\n            }, 1);\r\n          });\r\n        }\r\n      }\r\n    : () => {};\r\n\r\nclass PostTaskAction<T> extends Subscription {\r\n  _scheduler;\r\n  constructor(private work: (this: SchedulerAction<T>, state?: T) => void) {\r\n    super();\r\n  }\r\n\r\n  schedule(state?: T, delay?: number) {\r\n    if (this.closed) {\r\n      return this;\r\n    }\r\n    return this._scheduler.schedule(this.work, delay, state);\r\n  }\r\n}\r\n\r\nexport function getPostTaskScheduler(\r\n  priority: PostTaskSchedulerPriority\r\n): SchedulerLike {\r\n  return ({\r\n    now() {\r\n      return asyncScheduler.now();\r\n    },\r\n    schedule<T>(\r\n      work: (this: SchedulerAction<T>, state?: T) => void,\r\n      options: SchedulerPostTaskOptions = {} as SchedulerPostTaskOptions,\r\n      state?: T\r\n    ): Subscription {\r\n      if (isObject(options) && (options as SchedulerPostTaskOptions).delay) {\r\n        return asyncScheduler.schedule(\r\n          work,\r\n          (options as SchedulerPostTaskOptions).delay,\r\n          state\r\n        );\r\n      }\r\n\r\n      options = { ...options, priority };\r\n\r\n      const action = new PostTaskAction(work);\r\n      // weired hack\r\n      action._scheduler = this;\r\n\r\n      const promise = postTaskScheduler\r\n        .postTask(() => {}, options)\r\n        .then(() => {\r\n          try {\r\n            work.call(action, state);\r\n          } catch (error) {\r\n            action.unsubscribe();\r\n            throw error;\r\n          }\r\n        });\r\n      action.add(() => {\r\n        throw new Error('not implemented');\r\n      });\r\n      return action;\r\n    }\r\n  } as unknown) as SchedulerLike;\r\n}\r\n"]}