{"version":3,"file":"idleCallbackScheduler.js","sourceRoot":"ng://@rx-angular/template/","sources":["lib/render-strategies/rxjs/scheduling/idleCallbackScheduler.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,cAAc,EAGd,YAAY,EACb,MAAM,MAAM,CAAC;AA2Bd,MAAM,CAAC,IAAM,kBAAkB,GAC7B,OAAO,MAAM,KAAK,WAAW;IAC3B,CAAC,CAAE,MAAc,CAAC,kBAAkB;QAClC,UAAS,MAAc;YACrB,OAAO,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;YAC7C,YAAY,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC;IACH,CAAC,CAAC,cAAO,CAAC,CAAC;AAEf,MAAM,CAAC,IAAM,mBAAmB,GAC9B,OAAO,MAAM,KAAK,WAAW;IAC3B,CAAC,CAAE,MAAc,CAAC,mBAAmB;QACnC,UAAS,EAAY;YACnB,OAAO,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;YAC9C,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACzB,OAAO,UAAU,CAAC;gBAChB,EAAE,CAAC;oBACD,UAAU,EAAE,KAAK;oBACjB,aAAa,EAAE;wBACb,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC;oBAChD,CAAC;iBACF,CAAC,CAAC;YACL,CAAC,EAAE,CAAC,CAAC,CAAC;QACR,CAAC;IACH,CAAC,CAAC,cAAO,CAAC,CAAC;AAEf;IAA4B,8BAAY;IACtC,oBAAoB,IAAmD;QAAvE,YACE,iBAAO,SACR;QAFmB,UAAI,GAAJ,IAAI,CAA+C;;IAEvE,CAAC;IAED,6BAAQ,GAAR,UAAS,KAAS,EAAE,KAAc;QAChC,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,IAAI,CAAC;SACb;QACD,OAAO,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;IACH,iBAAC;AAAD,CAAC,AAXD,CAA4B,YAAY,GAWvC;AAED,MAAM,CAAC,IAAM,aAAa,GAAkB;IAC1C,GAAG;QACD,OAAO,cAAc,CAAC,GAAG,EAAE,CAAC;IAC9B,CAAC;IACD,QAAQ,EAAR,UACE,IAAmD,EACnD,KAAc,EACd,KAAS;QAET,IAAI,KAAK,EAAE;YACT,OAAO,cAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;SACpD;QAED,IAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;QACpC,IAAM,EAAE,GAAG,mBAAmB,CAAC;YAC7B,IAAI;gBACF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aAC1B;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,WAAW,EAAE,CAAC;gBACrB,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,CAAC,cAAM,OAAA,kBAAkB,CAAC,EAAE,CAAC,EAAtB,CAAsB,CAAC,CAAC;QACzC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAC","sourcesContent":["import {\r\n  asyncScheduler,\r\n  SchedulerAction,\r\n  SchedulerLike,\r\n  Subscription\r\n} from 'rxjs';\r\n\r\n/**\r\n *\r\n * Implementation based on rxjs-etc => IdleScheduler\r\n *\r\n */\r\ntype IdleId = ReturnType<typeof setTimeout>;\r\n\r\ntype RequestIdleCallbackHandle = any;\r\n\r\ninterface RequestIdleCallbackOptions {\r\n  timeout: number;\r\n}\r\n\r\ninterface RequestIdleCallbackDeadline {\r\n  readonly didTimeout: boolean;\r\n  timeRemaining: () => number;\r\n}\r\n\r\ntype RequestIdleCallback = (\r\n  callback: (deadline: RequestIdleCallbackDeadline) => void,\r\n  opts?: RequestIdleCallbackOptions\r\n) => RequestIdleCallbackHandle;\r\n\r\ntype CancelIdleCallback = (idleId: IdleId) => void;\r\n\r\nexport const cancelIdleCallback: CancelIdleCallback =\r\n  typeof window !== 'undefined'\r\n    ? (window as any).cancelIdleCallback ||\r\n      function(idleId: IdleId): void {\r\n        console.warn('Fake cancelIdleCallback used');\r\n        clearTimeout(idleId);\r\n      }\r\n    : () => {};\r\n\r\nexport const requestIdleCallback: RequestIdleCallback =\r\n  typeof window !== 'undefined'\r\n    ? (window as any).requestIdleCallback ||\r\n      function(cb: Function) {\r\n        console.warn('Fake requestIdleCallback used');\r\n        const start = Date.now();\r\n        return setTimeout(function() {\r\n          cb({\r\n            didTimeout: false,\r\n            timeRemaining: function() {\r\n              return Math.max(0, 50 - (Date.now() - start));\r\n            }\r\n          });\r\n        }, 1);\r\n      }\r\n    : () => {};\r\n\r\nclass IdleAction<T> extends Subscription {\r\n  constructor(private work: (this: SchedulerAction<T>, state?: T) => void) {\r\n    super();\r\n  }\r\n\r\n  schedule(state?: T, delay?: number) {\r\n    if (this.closed) {\r\n      return this;\r\n    }\r\n    return idleScheduler.schedule(this.work, delay, state);\r\n  }\r\n}\r\n\r\nexport const idleScheduler: SchedulerLike = {\r\n  now() {\r\n    return asyncScheduler.now();\r\n  },\r\n  schedule<T>(\r\n    work: (this: SchedulerAction<T>, state?: T) => void,\r\n    delay?: number,\r\n    state?: T\r\n  ): Subscription {\r\n    if (delay) {\r\n      return asyncScheduler.schedule(work, delay, state);\r\n    }\r\n\r\n    const action = new IdleAction(work);\r\n    const id = requestIdleCallback(() => {\r\n      try {\r\n        work.call(action, state);\r\n      } catch (error) {\r\n        action.unsubscribe();\r\n        throw error;\r\n      }\r\n    });\r\n    action.add(() => cancelIdleCallback(id));\r\n    return action;\r\n  }\r\n};\r\n"]}