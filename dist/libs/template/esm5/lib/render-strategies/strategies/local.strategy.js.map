{"version":3,"file":"local.strategy.js","sourceRoot":"ng://@rx-angular/template/","sources":["lib/render-strategies/strategies/local.strategy.ts"],"names":[],"mappings":"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","sourcesContent":["import { coalesceAndSchedule, staticCoalesce } from '../static';\r\nimport { SchedulingPriority } from '../rxjs/scheduling/interfaces';\r\nimport { getUnpatchedResolvedPromise } from '../../core/utils/unpatched-promise';\r\nimport { from, Observable } from 'rxjs';\r\nimport { getScheduler } from '../rxjs/scheduling/priority-scheduler-map';\r\nimport { observeOn } from 'rxjs/operators';\r\nimport {\r\n  RenderStrategy,\r\n  RenderStrategyFactoryConfig\r\n} from '../../core/render-aware/interfaces';\r\nimport { coalesceWith } from '../rxjs/operators/coalesceWith';\r\nimport {\r\n  postTaskScheduler,\r\n  PostTaskSchedulerPriority\r\n} from '../rxjs/scheduling/getPostTaskScheduler';\r\n\r\n/**\r\n * Strategies\r\n *\r\n * - VE/I - Options for ViewEngine / Ivy\r\n * - mFC - `cdRef.markForCheck`\r\n * - dC - `cdRef.detectChanges`\r\n * - ɵMD - `ɵmarkDirty`\r\n * - ɵDC - `ɵdetectChanges`\r\n * - LV  - `LView`\r\n * - C - `Component`\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------------- | ---------------- |\r\n * | `local`    | ✔/✔ ️        | dC / ɵDC            | ✔ ️ + C/ LV     |\r\n * | `detach`   | ❌/✔ ️       | mFC  / ɵMD          | ❌               |\r\n * | `postTask` | ❌/✔ ️       | mFC  / ɵMD          | ❌               |\r\n * | `idleCallback` | ❌/✔ ️   | mFC  / ɵMD          | ❌               |\r\n *\r\n */\r\n\r\nexport function getLocalStrategies<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): { [strategy: string]: RenderStrategy<T> } {\r\n  return {\r\n    local: createLocalStrategy<T>(config),\r\n    localCoalesce: createLocalCoalesceStrategy<T>(config),\r\n    localCoalesceAndSchedule: createLocalCoalesceAndScheduleStrategy<T>(config),\r\n    localNative: createLocalNativeStrategy<T>(config),\r\n    detach: createDetachStrategy(config),\r\n    userVisible: createUserVisibleStrategy(config),\r\n    userBlocking: createUserBlockingStrategy(config),\r\n    background: createBackgroundStrategy(config),\r\n    idleCallback: createIdleCallbackStrategy(config)\r\n  };\r\n}\r\n\r\nexport function createLocalNativeStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o => o.pipe();\r\n  const scheduleCD = () => renderMethod();\r\n\r\n  return {\r\n    name: 'localNative',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  Local Strategy\r\n *\r\n * This strategy is rendering the actual component and\r\n * all it's children that are on a path\r\n * that is marked as dirty or has components with `ChangeDetectionStrategy.Default`.\r\n *\r\n * As detectChanges has no coalescing of render calls\r\n * like `ChangeDetectorRef#markForCheck` or `ɵmarkDirty` has, so we have to apply our own coalescing, 'scoped' on\r\n * component level.\r\n *\r\n * Coalescing, in this very manner,\r\n * means **collecting all events** in the same\r\n * [EventLoop](https://developer.mozilla.org/de/docs/Web/JavaScript/EventLoop) tick, that would cause a re-render and\r\n * execute **re-rendering only once**.\r\n *\r\n * 'Scoped' coalescing, in addition, means **grouping the collected events by** a specific context.\r\n * E. g. the **component** from which the re-rendering was initiated.\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------ ------ | ---------------- |\r\n * | `ɵlocal`    | ✔️/✔️    | dC / dC             | ✔️ + C         |\r\n *\r\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\r\n * @return {RenderStrategy<T>} - The calculated strategy\r\n *\r\n */\r\nexport function createLocalStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.animationFrame;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'local',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\nexport function createLocalCoalesceStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.animationFrame;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'localCoalesce',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\nexport function createLocalCoalesceAndScheduleStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.animationFrame;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'localCoalesceAndSchedule',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  Detach Strategy\r\n *\r\n * This strategy is rendering the actual component and\r\n * all it's children that are on a path\r\n * that is marked as dirty or has components with `ChangeDetectionStrategy.Default`.\r\n *\r\n * As detectChanges has no coalescing of render calls\r\n * like `ChangeDetectorRef#markForCheck` or `ɵmarkDirty` has, so we have to apply our own coalescing, 'scoped' on\r\n * component level.\r\n *\r\n * Coalescing, in this very manner,\r\n * means **collecting all events** in the same\r\n * [EventLoop](https://developer.mozilla.org/de/docs/Web/JavaScript/EventLoop) tick, that would cause a re-render and\r\n * execute **re-rendering only once**.\r\n *\r\n * 'Scoped' coalescing, in addition, means **grouping the collected events by** a specific context.\r\n * E. g. the **component** from which the re-rendering was initiated.\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------ ------ | ---------------- |\r\n * | `ɵdetach`     | ✔️/✔️          | dC / ɵDC            | ✔️ + C/ LV       |\r\n *\r\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\r\n * @return {RenderStrategy<T>} - The calculated strategy\r\n *\r\n */\r\nexport function createDetachStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.animationFrame;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.reattach();\r\n    config.cdRef.detectChanges();\r\n    config.cdRef.detach();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'detach',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  PostTask - Priority UserVisible Strategy\r\n *\r\n */\r\nexport function createUserVisibleStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = new Observable(subscriber => {\r\n    from(\r\n      postTaskScheduler.postTask(() => void 0, {\r\n        priority: PostTaskSchedulerPriority.userVisible,\r\n        delay: 0\r\n      })\r\n    ).subscribe(subscriber);\r\n  });\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.background;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'userVisible',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  PostTask - Priority UserBlocking Strategy\r\n *\r\n */\r\nexport function createUserBlockingStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = new Observable(subscriber => {\r\n    from(\r\n      postTaskScheduler.postTask(() => void 0, {\r\n        priority: PostTaskSchedulerPriority.userVisible,\r\n        delay: 0\r\n      })\r\n    ).subscribe(subscriber);\r\n  });\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.background;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => {\r\n    staticCoalesce(renderMethod, durationSelector, scope);\r\n    // coalesceAndSchedule(renderMethod, priority, scope);\r\n  };\r\n\r\n  return {\r\n    name: 'userBlocking',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  PostTask - Priority Background Strategy\r\n *\r\n */\r\nexport function createBackgroundStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = new Observable(subscriber => {\r\n    from(\r\n      postTaskScheduler.postTask(() => void 0, {\r\n        priority: PostTaskSchedulerPriority.userVisible,\r\n        delay: 0\r\n      })\r\n    ).subscribe(subscriber);\r\n  });\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.background;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => {\r\n    staticCoalesce(renderMethod, durationSelector, scope);\r\n    // coalesceAndSchedule(renderMethod, priority, scope);\r\n  };\r\n  return {\r\n    name: 'background',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  IdleCallback Strategy\r\n *\r\n * This strategy is rendering the actual component and\r\n * all it's children that are on a path\r\n * that is marked as dirty or has components with `ChangeDetectionStrategy.Default`.\r\n *\r\n * As detectChanges is used the coalescing described in `ɵlocal` is implemented here.\r\n *\r\n * 'Scoped' coalescing, in addition, means **grouping the collected events by** a specific context.\r\n * E. g. the **component** from which the re-rendering was initiated.\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------ ------ | ---------------- |\r\n * | `ɵdetach`     | ✔️/✔️          | dC / ɵDC            | ✔️ + C/ LV       |\r\n *\r\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\r\n * @return {RenderStrategy<T>} - The calculated strategy\r\n *\r\n */\r\nexport function createIdleCallbackStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.idleCallback;\r\n  const scheduler = getScheduler(priority);\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'idleCallback',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n"]}