{"version":3,"file":"rx-angular-template.js","sources":["ng://@rx-angular/template/lib/core/rxjs/operators/toObservableValue.ts","ng://@rx-angular/template/lib/core/render-aware/nameToStrategy.ts","ng://@rx-angular/template/lib/core/render-aware/render-aware_creator.ts","ng://@rx-angular/template/lib/core/utils/get-global-this.ts","ng://@rx-angular/template/lib/core/utils/properties-weakmap.ts","ng://@rx-angular/template/lib/core/utils/zone-checks.ts","ng://@rx-angular/template/lib/core/utils/unpatched-promise.ts","ng://@rx-angular/template/lib/core/utils/view-engine-checks.ts","ng://@rx-angular/template/lib/core/utils/make-zone-less.ts","ng://@rx-angular/template/lib/core/render-aware/coalescing-manager.ts","ng://@rx-angular/template/lib/render-strategies/rxjs/operators/coalesceWith.ts","ng://@rx-angular/template/lib/render-strategies/rxjs/operators/renderChange.ts","ng://@rx-angular/template/lib/render-strategies/rxjs/scheduling/asapScheduler.ts","ng://@rx-angular/template/lib/render-strategies/rxjs/scheduling/getPostTaskScheduler.ts","ng://@rx-angular/template/lib/render-strategies/rxjs/scheduling/idleCallbackScheduler.ts","ng://@rx-angular/template/lib/render-strategies/rxjs/scheduling/animationFrameScheduler.ts","ng://@rx-angular/template/lib/render-strategies/rxjs/scheduling/interfaces.ts","ng://@rx-angular/template/lib/render-strategies/rxjs/scheduling/priority-scheduler-map.ts","ng://@rx-angular/template/lib/render-strategies/static/static-coalesce.ts","ng://@rx-angular/template/lib/render-strategies/static/static-schedule.ts","ng://@rx-angular/template/lib/render-strategies/static/static-schedule-and-coalesced.ts","ng://@rx-angular/template/lib/render-strategies/strategies/noop.strategy.ts","ng://@rx-angular/template/lib/render-strategies/strategies/native.strategy.ts","ng://@rx-angular/template/lib/render-strategies/strategies/local.strategy.ts","ng://@rx-angular/template/lib/render-strategies/strategies/global.strategy.ts","ng://@rx-angular/template/lib/render-strategies/strategies/strategies-map.ts","ng://@rx-angular/template/lib/push/push.pipe.ts","ng://@rx-angular/template/lib/push/push.module.ts","ng://@rx-angular/template/lib/let/let.directive.ts","ng://@rx-angular/template/lib/let/let.module.ts","ng://@rx-angular/template/lib/unpatch/events/unpatch-event-list.ts","ng://@rx-angular/template/lib/unpatch/events/unpatch-events.directive.ts","ng://@rx-angular/template/lib/unpatch/events/unpatch-events.module.ts","ng://@rx-angular/template/lib/template.module.ts","ng://@rx-angular/template/rx-angular-template.ts"],"sourcesContent":["import { from, of, Observable, ObservableInput } from 'rxjs';\r\n\r\nexport function toObservableValue<T>(\r\n  p: ObservableInput<T> | undefined | null\r\n): Observable<T | undefined | null> {\r\n  // @ts-ignore\r\n  return p == null ? of(p) : from(p);\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport { RenderStrategy, StrategySelection } from './interfaces';\r\n\r\nexport function nameToStrategy<U>(strategies: StrategySelection<U>) {\r\n  return (o$: Observable<string>): Observable<RenderStrategy<U>> => {\r\n    return o$.pipe(\r\n      distinctUntilChanged(),\r\n      map(\r\n        (strategy: string): RenderStrategy<U> => {\r\n          const s = strategies[strategy];\r\n          if (!!s) {\r\n            return s;\r\n          }\r\n          throw new Error(`Strategy ${strategy} does not exist.`);\r\n        }\r\n      )\r\n    );\r\n  };\r\n}\r\n","import {\r\n  ConnectableObservable,\r\n  EMPTY,\r\n  NextObserver,\r\n  Observable,\r\n  of,\r\n  ReplaySubject,\r\n  Subject,\r\n  Subscribable,\r\n  Subscription\r\n} from 'rxjs';\r\nimport {\r\n  catchError,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  publishReplay,\r\n  switchAll,\r\n  switchMap,\r\n  tap,\r\n  withLatestFrom\r\n} from 'rxjs/operators';\r\nimport { RenderStrategy, StrategySelection } from './interfaces';\r\nimport { nameToStrategy } from './nameToStrategy';\r\nimport { DEFAULT_STRATEGY_NAME } from '../../render-strategies/strategies/strategies-map';\r\n\r\nexport interface RenderAware<U> extends Subscribable<U> {\r\n  nextPotentialObservable: (value: any) => void;\r\n  nextStrategy: (config: string | Observable<string>) => void;\r\n  activeStrategy$: Observable<RenderStrategy<U>>;\r\n}\r\n\r\n/**\r\n * RenderAware\r\n *\r\n * @description\r\n * This function returns an object that holds all the shared logic for the push pipe and the let directive\r\n * responsible for change detection\r\n * If you extend this class you need to implement how the update of the rendered value happens.\r\n * Also custom behaviour is something you need to implement in the extending class\r\n */\r\nexport function createRenderAware<U>(cfg: {\r\n  strategies: StrategySelection<U>;\r\n  resetObserver: NextObserver<void>;\r\n  updateObserver: NextObserver<U>;\r\n}): RenderAware<U | undefined | null> {\r\n  const strategyName$ = new ReplaySubject<string | Observable<string>>(1);\r\n  const strategy$: Observable<RenderStrategy<U>> = strategyName$.pipe(\r\n    distinctUntilChanged(),\r\n    switchMap(stringOrObservable =>\r\n      typeof stringOrObservable === 'string'\r\n        ? of(stringOrObservable)\r\n        : stringOrObservable\r\n    ),\r\n    nameToStrategy(cfg.strategies)\r\n  );\r\n\r\n  const observablesFromTemplate$ = new ReplaySubject<Observable<U>>(1);\r\n  const valuesFromTemplate$ = observablesFromTemplate$.pipe(\r\n    distinctUntilChanged()\r\n  );\r\n  let firstTemplateObservableChange = true;\r\n\r\n  const renderingEffect$ = valuesFromTemplate$.pipe(\r\n    // handle null | undefined assignment and new Observable reset\r\n    map(observable$ => {\r\n      if (observable$ === null) {\r\n        return of(null);\r\n      }\r\n      if (!firstTemplateObservableChange) {\r\n        cfg.resetObserver.next();\r\n        if (observable$ === undefined) {\r\n          return of(undefined);\r\n        }\r\n      }\r\n      firstTemplateObservableChange = false;\r\n      return observable$;\r\n    }),\r\n    // forward only observable values\r\n    filter(o$ => o$ !== undefined),\r\n    switchMap(o$ => o$.pipe(distinctUntilChanged(), tap(cfg.updateObserver))),\r\n    withLatestFrom(strategy$),\r\n    tap(([v, strat]) => strat.scheduleCD()),\r\n    catchError(e => {\r\n      console.error(e);\r\n      return EMPTY;\r\n    })\r\n  );\r\n\r\n  return {\r\n    nextPotentialObservable(value: any): void {\r\n      observablesFromTemplate$.next(value);\r\n    },\r\n    nextStrategy(nextConfig: string | Observable<string>): void {\r\n      strategyName$.next(nextConfig);\r\n    },\r\n    activeStrategy$: strategy$,\r\n    subscribe(): Subscription {\r\n      return new Subscription()\r\n        .add(strategy$.subscribe())\r\n        .add(renderingEffect$.subscribe());\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @description\r\n *\r\n * A fallback for the new `globalThis` reference.\r\n *\r\n *  It should be used to replace `window` due to different environments in:\r\n *  - SSR (Server Side Rendering)\r\n *  - Tests\r\n *  - Browser\r\n *\r\n *  @return {globalThis} - A reference to globalThis. `window` in the Browser.\r\n */\r\nexport function getGlobalThis(): any {\r\n  return ((globalThis as any) || (self as any) || (window as any)) as any;\r\n}\r\n","type KeyOf<O> = keyof O & string & symbol & number;\r\n\r\n/*\r\n * createPropertiesWeakMap\r\n *\r\n * @param getDefaults: (o: O) => P\r\n * Example:\r\n *\r\n * export interface Properties {\r\n *   isCoalescing: boolean;\r\n * }\r\n *\r\n * const obj: object = {\r\n *   foo: 'bar',\r\n *   isCoalescing: 'weakMap version'\r\n * };\r\n *\r\n * const getDefaults = (ctx: object): Properties => ({isCoalescing: false});\r\n * const propsMap = createPropertiesWeakMap<object, Properties>(getDefaults);\r\n *\r\n * console.log('obj before:', obj);\r\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\r\n * console.log('props before:', propsMap.getProps(obj));\r\n * // {isCoalescing: \"weakMap version\"}\r\n *\r\n * propsMap.setProps(obj, {isCoalescing: true});\r\n * console.log('obj after:', obj);\r\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\r\n * console.log('props after:', propsMap.getProps(obj));\r\n * // {isCoalescing: \"true\"}\r\n * */\r\nexport function createPropertiesWeakMap<O extends object, P extends object>(\r\n  getDefaults: (o: O) => P\r\n) {\r\n  type K = KeyOf<P>;\r\n  const propertyMap = new WeakMap<O, P>();\r\n\r\n  return {\r\n    getProps: getProperties,\r\n    setProps: setProperties\r\n  };\r\n\r\n  function getProperties(ctx: O): P {\r\n    const defaults = getDefaults(ctx);\r\n    const propertiesPresent: P | undefined = propertyMap.get(ctx);\r\n    let properties: P;\r\n\r\n    if (propertiesPresent !== undefined) {\r\n      properties = propertiesPresent;\r\n    } else {\r\n      properties = {} as P;\r\n\r\n      (Object.entries(defaults) as [K, P[K]][]).forEach(\r\n        ([prop, value]): void => {\r\n          properties[prop] = hasKey(ctx, prop) ? ctx[prop] : value;\r\n        }\r\n      );\r\n\r\n      propertyMap.set(ctx, properties);\r\n    }\r\n    return properties;\r\n  }\r\n\r\n  function setProperties(ctx: O, props: Partial<P>): P {\r\n    const properties: P = getProperties(ctx);\r\n    (Object.entries(props) as [K, P[K]][]).forEach(([prop, value]) => {\r\n      properties[prop] = value;\r\n    });\r\n    propertyMap.set(ctx, properties);\r\n    return properties;\r\n  }\r\n\r\n  function hasKey(ctx: O, property: K): ctx is K {\r\n    return ctx[property] != null;\r\n  }\r\n}\r\n","import { getGlobalThis } from './get-global-this';\r\n\r\n/**\r\n * envZonePatched\r\n *\r\n * @description\r\n *\r\n * This function checks the window object `zone.js` was instantiated.\r\n * If so, the `window` object maintains a property named `Zone`.\r\n *\r\n * Here how Angular checks it: https://github.com/angular/angular/blob/master/packages/core/src/zone/ng_zone.ts#L123\r\n *\r\n * @return {boolean} - true if `zone.js` patched global APIs.\r\n *\r\n */\r\nexport function envZonePatched(): boolean {\r\n  return getGlobalThis().Zone !== undefined;\r\n}\r\n\r\n/**\r\n * apiZonePatched\r\n *\r\n * @description\r\n *\r\n * This function checks if a specific Browser API is patched by `zone.js`.\r\n *\r\n * @param name {string} - The name of the API to check.\r\n * @return {boolean} - true if `zone.js` patched the API in question.\r\n *\r\n */\r\nexport function apiZonePatched(name: string): boolean {\r\n  // if symbol is present, zone patched the API\r\n  return getGlobalThis()['__zone_symbol__' + name] !== undefined;\r\n}\r\n\r\nconst zoneDetectionCache = new WeakMap<any, boolean>();\r\n\r\n/**\r\n * isNgZone\r\n *\r\n * @description\r\n *\r\n * This function takes an instance of a class which implements the NgZone interface and checks if\r\n * its `runOutsideAngular()` function calls `apply()` on the function passed as parameter. This\r\n * means the Angular application that instantiated this service assumes it runs in a ZoneLess\r\n * environment, and therefore it's change detection will not be triggered by zone related logic.\r\n *\r\n * However, keep in mind this does not mean `zone.js` is not present.\r\n * The environment could still run in ZoneFull mode even if Angular turned it off.\r\n * Consider the situation of a Angular element configured for ZoneLess\r\n * environments is used in an Angular application relining on the zone mechanism.\r\n *\r\n * @param instance {Class Instance} - The instance to check for constructor name of `NgZone`.\r\n * @return {boolean} - true if instance is of type `NgZone`.\r\n *\r\n */\r\nexport function isNgZone(instance: any): boolean {\r\n  const cachedValue = zoneDetectionCache.get(instance);\r\n\r\n  if (cachedValue !== undefined) {\r\n    return cachedValue;\r\n  }\r\n\r\n  let calledApply = false;\r\n\r\n  function fn() {}\r\n  fn.apply = () => (calledApply = true);\r\n\r\n  instance.runOutsideAngular(fn);\r\n  zoneDetectionCache.set(instance, calledApply);\r\n\r\n  return calledApply;\r\n}\r\n\r\n/**\r\n * isNoopNgZone\r\n *\r\n *@description\r\n *\r\n * This function takes any instance of a class and checks\r\n * if the constructor name is equal to `NoopNgZone`.\r\n *\r\n * For more detailed information read the description of [isNgZone](#isngzone).\r\n *\r\n * @param instance {Class Instance} - The instance to check for constructor name of `NoopNgZone`.\r\n * @return {boolean} - true if instance is of type `NoopNgZone`.\r\n *\r\n */\r\nexport function isNoopNgZone(instance: any): boolean {\r\n  return !isNgZone(instance);\r\n}\r\n","/** A shared promise instance to cause a delay of one microtask */\r\nimport { getGlobalThis } from './get-global-this';\r\nimport { apiZonePatched } from './zone-checks';\r\n\r\nlet resolvedPromise: Promise<void> | null = null;\r\n\r\nexport function getUnpatchedResolvedPromise(): Promise<void> {\r\n  resolvedPromise =\r\n    resolvedPromise ||\r\n    (apiZonePatched('Promise')\r\n      ? (getGlobalThis().__zone_symbol__Promise.resolve() as Promise<void>)\r\n      : Promise.resolve());\r\n  return resolvedPromise;\r\n}\r\n","import { getGlobalThis } from './get-global-this';\r\n\r\n/**\r\n * envRunsIvy\r\n *\r\n * @description\r\n * Determines the used view engine of an Angular project is Ivy or not.\r\n * The check is done based on following table:\r\n * | render       | ViewEngine | ViewEngine | Ivy         | Ivy         |\r\n * | ------------ | ---------- | ---------- | ----------- | ----------- |\r\n * | **mode**     | prod       | dev        | prod        | dev         |\r\n * | **ng**       | present    | present    | `undefined` | present     |\r\n * | **ng.probe** | present    | present    | `undefined` | `undefined` |\r\n *\r\n *  So for Ivy we need to make sure that ng is undefined or,\r\n *  in case of dev environment, ng.probe is undefined.\r\n *\r\n * @return {boolean} - true if the used view engine is Ivy.\r\n *\r\n */\r\nexport function isViewEngineIvy(): boolean {\r\n  const ng: any = getGlobalThis().ng;\r\n\r\n  // Is the global ng object is unavailable?\r\n  // ng === undefined in Ivy production mode\r\n  // View Engine has the ng object both in development mode and production mode.\r\n  return (\r\n    ng === undefined ||\r\n    // in case we are in dev mode in ivy\r\n    // `probe` property is available on ng object we use View Engine.\r\n    ng.probe === undefined\r\n  );\r\n}\r\n","import { getGlobalThis } from './get-global-this';\r\nimport { apiZonePatched } from './zone-checks';\r\n\r\n/**\r\n * getZoneUnPatchedApi\r\n *\r\n * @description\r\n *\r\n * This function returns the zone un-patched API for the a specific Browser API.\r\n * If no element is passed the window is used instead\r\n *\r\n * @param name {string} - The name of the API to check.\r\n * @param elem {any} - The elem to get un-patched API from.\r\n * @return {Function} - The zone un-patched API in question.\r\n *\r\n */\r\nexport function getZoneUnPatchedApi(name: string, elem?: any): Function {\r\n  elem = elem || getGlobalThis();\r\n  return apiZonePatched(name) ? elem['__zone_symbol__' + name] : elem[name];\r\n}\r\n\r\n/**\r\n *\r\n * @description\r\n *\r\n * This function takes an elem and event and re-applies the listeners from the passed event to the\r\n * passed element with the zone un-patched version of it.\r\n *\r\n * @param elem {HTMLElement} - The elem to re-apply the listeners to.\r\n * @param event {string} - The name of the event from which to re-apply the listeners.\r\n *\r\n * @returns void\r\n */\r\nexport function unpatchEventListener(elem: HTMLElement, event: string): void {\r\n  const eventListeners = (elem as any).eventListeners(event);\r\n  // Return if no event listeners are present\r\n  if (!eventListeners) {\r\n    return;\r\n  }\r\n\r\n  const addEventListener = getZoneUnPatchedApi('addEventListener', elem).bind(\r\n    elem\r\n  );\r\n  eventListeners.forEach(listener => {\r\n    // Remove and reapply listeners with patched API\r\n    elem.removeEventListener(event, listener);\r\n    // Reapply listeners with un-patched API\r\n    addEventListener(event, listener);\r\n  });\r\n}\r\n","import { createPropertiesWeakMap } from '../utils';\r\n\r\ninterface CoalescingContextProps {\r\n  numCoalescingSubscribers: number;\r\n}\r\n\r\nconst coalescingContextPropertiesMap = createPropertiesWeakMap<\r\n  object,\r\n  CoalescingContextProps\r\n>(ctx => ({\r\n  numCoalescingSubscribers: 0\r\n}));\r\n\r\nexport function createCoalesceManager(\r\n  scope: object = {}\r\n): {\r\n  remove: () => void;\r\n  add: () => void;\r\n  isCoalescing: () => boolean;\r\n} {\r\n  return {\r\n    remove: removeSubscriber,\r\n    add: addSubscription,\r\n    isCoalescing\r\n  };\r\n\r\n  // Increments the number of subscriptions in a scope e.g. a class instance\r\n  function removeSubscriber(): void {\r\n    const numCoalescingSubscribers =\r\n      coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers -\r\n      1;\r\n    coalescingContextPropertiesMap.setProps(scope, {\r\n      numCoalescingSubscribers\r\n    });\r\n  }\r\n\r\n  // Decrements the number of subscriptions in a scope e.g. a class instance\r\n  function addSubscription(): void {\r\n    const numCoalescingSubscribers =\r\n      coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers +\r\n      1;\r\n    coalescingContextPropertiesMap.setProps(scope, {\r\n      numCoalescingSubscribers\r\n    });\r\n  }\r\n\r\n  // Checks if anybody else is already coalescing atm\r\n  function isCoalescing(): boolean {\r\n    return (\r\n      coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers >\r\n      0\r\n    );\r\n  }\r\n}\r\n","import {\r\n  MonoTypeOperatorFunction,\r\n  Observable,\r\n  Observer,\r\n  Subscribable,\r\n  SubscribableOrPromise,\r\n  Subscriber,\r\n  Subscription,\r\n  Unsubscribable\r\n} from 'rxjs';\r\nimport { createCoalesceManager } from '../../../core/render-aware/coalescing-manager';\r\n\r\n/**\r\n * @description\r\n * Limits the number of synchronous emitted a value from the source Observable to\r\n * one emitted value per\r\n *   [`AnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame), then repeats\r\n *   this process for every tick of the browsers event loop.\r\n *\r\n * The coalesce operator is based on the [throttle](https://rxjs-dev.firebaseapp.com/api/operators/throttle) operator.\r\n * In addition to that is provides emitted values for the trailing end only, as well as maintaining a context to scope\r\n *   coalescing.\r\n *\r\n * @param {function(value: T): SubscribableOrPromise} durationSelector - A function\r\n * that receives a value from the source Observable, for computing the silencing\r\n * duration for each source value, returned as an Observable or a Promise.\r\n * It defaults to `requestAnimationFrame` as durationSelector.\r\n * @param {Object} config - A configuration object to define `leading` and `trailing` behavior and the context object.\r\n * Defaults to `{ leading: false, trailing: true }`. The default scoping is per subscriber.\r\n * @return {Observable<T>} An Observable that performs the coalesce operation to\r\n * limit the rate of emissions from the source.\r\n *\r\n * @usageNotes\r\n * Emit clicks at a rate of at most one click per second\r\n * ```ts\r\n * import { fromEvent, animationFrames } from 'rxjs';\r\n * import { coalesce } from 'ngRx/component';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(coalesce(ev => animationFrames));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n */\r\nexport function coalesceWith<T>(\r\n  durationSelector: Subscribable<any>,\r\n  scope?: object\r\n): MonoTypeOperatorFunction<T> {\r\n  const _scope = scope || {};\r\n  return source => {\r\n    const o$ = new Observable<T>(observer => {\r\n      const rootSubscription = new Subscription();\r\n      rootSubscription.add(\r\n        source.subscribe(createInnerObserver(observer, rootSubscription))\r\n      );\r\n      return rootSubscription;\r\n    });\r\n\r\n    return o$;\r\n\r\n    function createInnerObserver(\r\n      outerObserver: Subscriber<T>,\r\n      rootSubscription: Subscription\r\n    ): Observer<T> {\r\n      let actionSubscription: Unsubscribable;\r\n      let latestValue: T | undefined;\r\n      const coa = createCoalesceManager(_scope);\r\n      const tryEmitLatestValue = () => {\r\n        coa.remove();\r\n        if (!coa.isCoalescing()) {\r\n          outerObserver.next(latestValue);\r\n        }\r\n      };\r\n      return {\r\n        complete: () => {\r\n          if (actionSubscription) {\r\n            tryEmitLatestValue();\r\n          }\r\n          outerObserver.complete();\r\n        },\r\n        error: error => outerObserver.error(error),\r\n        next: value => {\r\n          latestValue = value;\r\n          if (!actionSubscription) {\r\n            coa.add();\r\n            actionSubscription = durationSelector.subscribe({\r\n              next: () => {\r\n                tryEmitLatestValue();\r\n                actionSubscription = undefined;\r\n              },\r\n              complete: () => {\r\n                if (actionSubscription) {\r\n                  tryEmitLatestValue();\r\n                  actionSubscription = undefined;\r\n                }\r\n              }\r\n            });\r\n            rootSubscription.add(actionSubscription);\r\n          }\r\n        }\r\n      };\r\n    }\r\n  };\r\n}\r\n","import { MonoTypeOperatorFunction, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { RenderStrategy } from '../../../core';\r\n\r\nexport function renderChange<T>(\r\n  strategy: RenderStrategy<T>\r\n): MonoTypeOperatorFunction<T> {\r\n  return (s: Observable<T>): Observable<T> => {\r\n    return s.pipe(\r\n      strategy.behavior,\r\n      tap(v => strategy.renderMethod())\r\n    );\r\n  };\r\n}\r\n","import { from, SchedulerLike, Subscription } from 'rxjs';\r\nimport { getUnpatchedResolvedPromise } from '../../../core';\r\n\r\nexport const unpatchedAsapScheduler: SchedulerLike = {\r\n  now() {\r\n    return 0;\r\n  },\r\n  schedule(\r\n    work: (...args: any[]) => void,\r\n    options?: number,\r\n    state?: any\r\n  ): Subscription {\r\n    return from(getUnpatchedResolvedPromise()).subscribe(() => work(state));\r\n  }\r\n};\r\n","import {\r\n  asyncScheduler,\r\n  SchedulerAction,\r\n  SchedulerLike,\r\n  Subscription\r\n} from 'rxjs';\r\nimport { isObject } from 'util';\r\n\r\n/**\r\n *\r\n * Implementation based on rxjs-etc => IdleScheduler\r\n *\r\n */\r\n\r\nexport enum PostTaskSchedulerPriority {\r\n  background = 'background',\r\n  userBlocking = 'user-blocking',\r\n  userVisible = 'user-visible'\r\n}\r\n\r\ninterface PostTaskScheduler {\r\n  postTask<T>(cb: () => void, options: SchedulerPostTaskOptions): Promise<T>;\r\n}\r\n\r\ninterface SchedulerPostTaskOptions {\r\n  priority: PostTaskSchedulerPriority | string | null;\r\n  delay: number;\r\n  signal?: any;\r\n}\r\n\r\nexport const postTaskScheduler: PostTaskScheduler =\r\n  typeof window !== 'undefined'\r\n    ? (window as any).scheduler || {\r\n        postTask<T>(options: SchedulerPostTaskOptions): Promise<T> {\r\n          const start = Date.now();\r\n          return new Promise(resolve => {\r\n            setTimeout(function() {\r\n              console.error(\r\n                'postTask not implemented. Use setTimeout as fallback'\r\n              );\r\n              resolve();\r\n            }, 1);\r\n          });\r\n        }\r\n      }\r\n    : () => {};\r\n\r\nclass PostTaskAction<T> extends Subscription {\r\n  _scheduler;\r\n  constructor(private work: (this: SchedulerAction<T>, state?: T) => void) {\r\n    super();\r\n  }\r\n\r\n  schedule(state?: T, delay?: number) {\r\n    if (this.closed) {\r\n      return this;\r\n    }\r\n    return this._scheduler.schedule(this.work, delay, state);\r\n  }\r\n}\r\n\r\nexport function getPostTaskScheduler(\r\n  priority: PostTaskSchedulerPriority\r\n): SchedulerLike {\r\n  return ({\r\n    now() {\r\n      return asyncScheduler.now();\r\n    },\r\n    schedule<T>(\r\n      work: (this: SchedulerAction<T>, state?: T) => void,\r\n      options: SchedulerPostTaskOptions = {} as SchedulerPostTaskOptions,\r\n      state?: T\r\n    ): Subscription {\r\n      if (isObject(options) && (options as SchedulerPostTaskOptions).delay) {\r\n        return asyncScheduler.schedule(\r\n          work,\r\n          (options as SchedulerPostTaskOptions).delay,\r\n          state\r\n        );\r\n      }\r\n\r\n      options = { ...options, priority };\r\n\r\n      const action = new PostTaskAction(work);\r\n      // weired hack\r\n      action._scheduler = this;\r\n\r\n      const promise = postTaskScheduler\r\n        .postTask(() => {}, options)\r\n        .then(() => {\r\n          try {\r\n            work.call(action, state);\r\n          } catch (error) {\r\n            action.unsubscribe();\r\n            throw error;\r\n          }\r\n        });\r\n      action.add(() => {\r\n        throw new Error('not implemented');\r\n      });\r\n      return action;\r\n    }\r\n  } as unknown) as SchedulerLike;\r\n}\r\n","import {\r\n  asyncScheduler,\r\n  SchedulerAction,\r\n  SchedulerLike,\r\n  Subscription\r\n} from 'rxjs';\r\n\r\n/**\r\n *\r\n * Implementation based on rxjs-etc => IdleScheduler\r\n *\r\n */\r\ntype IdleId = ReturnType<typeof setTimeout>;\r\n\r\ntype RequestIdleCallbackHandle = any;\r\n\r\ninterface RequestIdleCallbackOptions {\r\n  timeout: number;\r\n}\r\n\r\ninterface RequestIdleCallbackDeadline {\r\n  readonly didTimeout: boolean;\r\n  timeRemaining: () => number;\r\n}\r\n\r\ntype RequestIdleCallback = (\r\n  callback: (deadline: RequestIdleCallbackDeadline) => void,\r\n  opts?: RequestIdleCallbackOptions\r\n) => RequestIdleCallbackHandle;\r\n\r\ntype CancelIdleCallback = (idleId: IdleId) => void;\r\n\r\nexport const cancelIdleCallback: CancelIdleCallback =\r\n  typeof window !== 'undefined'\r\n    ? (window as any).cancelIdleCallback ||\r\n      function(idleId: IdleId): void {\r\n        console.warn('Fake cancelIdleCallback used');\r\n        clearTimeout(idleId);\r\n      }\r\n    : () => {};\r\n\r\nexport const requestIdleCallback: RequestIdleCallback =\r\n  typeof window !== 'undefined'\r\n    ? (window as any).requestIdleCallback ||\r\n      function(cb: Function) {\r\n        console.warn('Fake requestIdleCallback used');\r\n        const start = Date.now();\r\n        return setTimeout(function() {\r\n          cb({\r\n            didTimeout: false,\r\n            timeRemaining: function() {\r\n              return Math.max(0, 50 - (Date.now() - start));\r\n            }\r\n          });\r\n        }, 1);\r\n      }\r\n    : () => {};\r\n\r\nclass IdleAction<T> extends Subscription {\r\n  constructor(private work: (this: SchedulerAction<T>, state?: T) => void) {\r\n    super();\r\n  }\r\n\r\n  schedule(state?: T, delay?: number) {\r\n    if (this.closed) {\r\n      return this;\r\n    }\r\n    return idleScheduler.schedule(this.work, delay, state);\r\n  }\r\n}\r\n\r\nexport const idleScheduler: SchedulerLike = {\r\n  now() {\r\n    return asyncScheduler.now();\r\n  },\r\n  schedule<T>(\r\n    work: (this: SchedulerAction<T>, state?: T) => void,\r\n    delay?: number,\r\n    state?: T\r\n  ): Subscription {\r\n    if (delay) {\r\n      return asyncScheduler.schedule(work, delay, state);\r\n    }\r\n\r\n    const action = new IdleAction(work);\r\n    const id = requestIdleCallback(() => {\r\n      try {\r\n        work.call(action, state);\r\n      } catch (error) {\r\n        action.unsubscribe();\r\n        throw error;\r\n      }\r\n    });\r\n    action.add(() => cancelIdleCallback(id));\r\n    return action;\r\n  }\r\n};\r\n","import { Observable, SchedulerLike, Subscription } from 'rxjs';\r\nimport { getZoneUnPatchedApi } from '../../../core';\r\n\r\nconst animationFrameTick = new Observable(subscriber => {\r\n  let i = 0;\r\n  const id = getZoneUnPatchedApi('requestAnimationFrame')(() => {\r\n    subscriber.next(++i);\r\n  });\r\n\r\n  return () => {\r\n    getZoneUnPatchedApi('cancelAnimationFrame')(id);\r\n  };\r\n});\r\n\r\nexport const unpatchedAnimationFrameScheduler: SchedulerLike = {\r\n  now() {\r\n    return 0;\r\n  },\r\n  schedule(\r\n    work: (...args: any[]) => void,\r\n    options?: number,\r\n    state?: any\r\n  ): Subscription {\r\n    return animationFrameTick.subscribe(() => work(state));\r\n  }\r\n};\r\n","export enum SchedulingPriority {\r\n  animationFrame = 'animationFrame',\r\n  Promise = 'Promise',\r\n  idleCallback = 'idleCallback',\r\n  userBlocking = 'userBlocking',\r\n  userVisible = 'userVisible',\r\n  background = 'background',\r\n  setInterval = 'setInterval'\r\n}\r\n","import {\r\n  animationFrameScheduler,\r\n  asapScheduler,\r\n  asyncScheduler,\r\n  SchedulerLike\r\n} from 'rxjs';\r\nimport { SchedulingPriority } from './interfaces';\r\nimport {\r\n  getPostTaskScheduler,\r\n  PostTaskSchedulerPriority\r\n} from './getPostTaskScheduler';\r\nimport { idleScheduler } from './idleCallbackScheduler';\r\n\r\nexport const prioritySchedulerMap: { [name: string]: SchedulerLike } = {\r\n  animationFrame: animationFrameScheduler,\r\n  Promise: asapScheduler,\r\n  setInterval: asyncScheduler,\r\n  idleCallback: idleScheduler,\r\n  userBlocking: getPostTaskScheduler(PostTaskSchedulerPriority.userBlocking),\r\n  userVisible: getPostTaskScheduler(PostTaskSchedulerPriority.userVisible),\r\n  background: getPostTaskScheduler(PostTaskSchedulerPriority.background)\r\n};\r\n\r\nexport function getScheduler(priority: SchedulingPriority): SchedulerLike {\r\n  if (!prioritySchedulerMap.hasOwnProperty(priority)) {\r\n    throw new Error(`priority ${priority} is not present in prioritiesMap`);\r\n  }\r\n  return prioritySchedulerMap[priority];\r\n}\r\n","import { Subscribable } from 'rxjs';\r\nimport { createCoalesceManager } from '../../core/render-aware/coalescing-manager';\r\n\r\nexport function staticCoalesce<T>(\r\n  work: () => T,\r\n  durationSelector: Subscribable<any>,\r\n  scope: object = {}\r\n): void {\r\n  const coalescingManager = createCoalesceManager(scope);\r\n  if (!coalescingManager.isCoalescing()) {\r\n    coalescingManager.add();\r\n    durationSelector.subscribe(() => {\r\n      tryExecuteWork();\r\n    });\r\n  }\r\n\r\n  // =====\r\n\r\n  function tryExecuteWork() {\r\n    coalescingManager.remove();\r\n    if (!coalescingManager.isCoalescing()) {\r\n      return work();\r\n    }\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { getScheduler } from '../rxjs/scheduling/priority-scheduler-map';\r\nimport { SchedulingPriority } from '../rxjs/scheduling/interfaces';\r\n\r\nexport function schedule(\r\n  work: () => void,\r\n  priority?: SchedulingPriority\r\n): Subscription {\r\n  return getScheduler(priority).schedule(() => work());\r\n}\r\n","import { from } from 'rxjs';\r\nimport { staticCoalesce } from './static-coalesce';\r\nimport { schedule } from './static-schedule';\r\nimport { SchedulingPriority } from '../rxjs/scheduling/interfaces';\r\nimport { getUnpatchedResolvedPromise } from '../../core/utils/unpatched-promise';\r\n\r\nexport function coalesceAndSchedule(\r\n  work: () => void,\r\n  priority: SchedulingPriority,\r\n  scope: object = {}\r\n): void {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scheduledWork = () => schedule(work, priority);\r\n  staticCoalesce(scheduledWork, durationSelector, scope);\r\n}\r\n","import {\r\n  RenderStrategy,\r\n  RenderStrategyFactoryConfig\r\n} from '../../core/render-aware/interfaces';\r\n\r\n/**\r\n * Noop Strategy\r\n *\r\n * This strategy is does nothing. It serves for debugging only\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------ ------ | ---------------- |\r\n * | `noop`      | ❌/❌         | no rendering        | ❌               |\r\n *\r\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\r\n * @return {RenderStrategy<T>} - The calculated strategy\r\n *\r\n */\r\nexport function createNoopStrategy<T>(): RenderStrategy<T> {\r\n  return {\r\n    name: 'noop',\r\n    renderMethod: () => {},\r\n    behavior: o => o,\r\n    scheduleCD: () => {}\r\n  };\r\n}\r\n","import { RenderStrategy, RenderStrategyFactoryConfig } from '../../core';\r\n\r\n/**\r\n * Native Strategy\r\n * @description\r\n *\r\n * This strategy mirrors Angular's built-in `async` pipe.\r\n * This means for every emitted value `ChangeDetectorRef#markForCheck` is called.\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------ ------ | ---------------- |\r\n * | `native`    | ❌/❌         | mFC / mFC           | ❌               |\r\n *\r\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\r\n * @return {RenderStrategy<T>} - The calculated strategy\r\n *\r\n */\r\nexport function createNativeStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  return {\r\n    name: 'native',\r\n    renderMethod: config.cdRef.markForCheck,\r\n    behavior: o => o,\r\n    scheduleCD: () => {\r\n      config.cdRef.markForCheck();\r\n    }\r\n  };\r\n}\r\n","import { coalesceAndSchedule, staticCoalesce } from '../static';\r\nimport { SchedulingPriority } from '../rxjs/scheduling/interfaces';\r\nimport { getUnpatchedResolvedPromise } from '../../core/utils/unpatched-promise';\r\nimport { from, Observable } from 'rxjs';\r\nimport { getScheduler } from '../rxjs/scheduling/priority-scheduler-map';\r\nimport { observeOn } from 'rxjs/operators';\r\nimport {\r\n  RenderStrategy,\r\n  RenderStrategyFactoryConfig\r\n} from '../../core/render-aware/interfaces';\r\nimport { coalesceWith } from '../rxjs/operators/coalesceWith';\r\nimport {\r\n  postTaskScheduler,\r\n  PostTaskSchedulerPriority\r\n} from '../rxjs/scheduling/getPostTaskScheduler';\r\n\r\n/**\r\n * Strategies\r\n *\r\n * - VE/I - Options for ViewEngine / Ivy\r\n * - mFC - `cdRef.markForCheck`\r\n * - dC - `cdRef.detectChanges`\r\n * - ɵMD - `ɵmarkDirty`\r\n * - ɵDC - `ɵdetectChanges`\r\n * - LV  - `LView`\r\n * - C - `Component`\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------------- | ---------------- |\r\n * | `local`    | ✔/✔ ️        | dC / ɵDC            | ✔ ️ + C/ LV     |\r\n * | `detach`   | ❌/✔ ️       | mFC  / ɵMD          | ❌               |\r\n * | `postTask` | ❌/✔ ️       | mFC  / ɵMD          | ❌               |\r\n * | `idleCallback` | ❌/✔ ️   | mFC  / ɵMD          | ❌               |\r\n *\r\n */\r\n\r\nexport function getLocalStrategies<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): { [strategy: string]: RenderStrategy<T> } {\r\n  return {\r\n    local: createLocalStrategy<T>(config),\r\n    localCoalesce: createLocalCoalesceStrategy<T>(config),\r\n    localCoalesceAndSchedule: createLocalCoalesceAndScheduleStrategy<T>(config),\r\n    localNative: createLocalNativeStrategy<T>(config),\r\n    detach: createDetachStrategy(config),\r\n    userVisible: createUserVisibleStrategy(config),\r\n    userBlocking: createUserBlockingStrategy(config),\r\n    background: createBackgroundStrategy(config),\r\n    idleCallback: createIdleCallbackStrategy(config)\r\n  };\r\n}\r\n\r\nexport function createLocalNativeStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o => o.pipe();\r\n  const scheduleCD = () => renderMethod();\r\n\r\n  return {\r\n    name: 'localNative',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  Local Strategy\r\n *\r\n * This strategy is rendering the actual component and\r\n * all it's children that are on a path\r\n * that is marked as dirty or has components with `ChangeDetectionStrategy.Default`.\r\n *\r\n * As detectChanges has no coalescing of render calls\r\n * like `ChangeDetectorRef#markForCheck` or `ɵmarkDirty` has, so we have to apply our own coalescing, 'scoped' on\r\n * component level.\r\n *\r\n * Coalescing, in this very manner,\r\n * means **collecting all events** in the same\r\n * [EventLoop](https://developer.mozilla.org/de/docs/Web/JavaScript/EventLoop) tick, that would cause a re-render and\r\n * execute **re-rendering only once**.\r\n *\r\n * 'Scoped' coalescing, in addition, means **grouping the collected events by** a specific context.\r\n * E. g. the **component** from which the re-rendering was initiated.\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------ ------ | ---------------- |\r\n * | `ɵlocal`    | ✔️/✔️    | dC / dC             | ✔️ + C         |\r\n *\r\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\r\n * @return {RenderStrategy<T>} - The calculated strategy\r\n *\r\n */\r\nexport function createLocalStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.animationFrame;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'local',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\nexport function createLocalCoalesceStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.animationFrame;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'localCoalesce',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\nexport function createLocalCoalesceAndScheduleStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.animationFrame;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'localCoalesceAndSchedule',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  Detach Strategy\r\n *\r\n * This strategy is rendering the actual component and\r\n * all it's children that are on a path\r\n * that is marked as dirty or has components with `ChangeDetectionStrategy.Default`.\r\n *\r\n * As detectChanges has no coalescing of render calls\r\n * like `ChangeDetectorRef#markForCheck` or `ɵmarkDirty` has, so we have to apply our own coalescing, 'scoped' on\r\n * component level.\r\n *\r\n * Coalescing, in this very manner,\r\n * means **collecting all events** in the same\r\n * [EventLoop](https://developer.mozilla.org/de/docs/Web/JavaScript/EventLoop) tick, that would cause a re-render and\r\n * execute **re-rendering only once**.\r\n *\r\n * 'Scoped' coalescing, in addition, means **grouping the collected events by** a specific context.\r\n * E. g. the **component** from which the re-rendering was initiated.\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------ ------ | ---------------- |\r\n * | `ɵdetach`     | ✔️/✔️          | dC / ɵDC            | ✔️ + C/ LV       |\r\n *\r\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\r\n * @return {RenderStrategy<T>} - The calculated strategy\r\n *\r\n */\r\nexport function createDetachStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.animationFrame;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.reattach();\r\n    config.cdRef.detectChanges();\r\n    config.cdRef.detach();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'detach',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  PostTask - Priority UserVisible Strategy\r\n *\r\n */\r\nexport function createUserVisibleStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = new Observable(subscriber => {\r\n    from(\r\n      postTaskScheduler.postTask(() => void 0, {\r\n        priority: PostTaskSchedulerPriority.userVisible,\r\n        delay: 0\r\n      })\r\n    ).subscribe(subscriber);\r\n  });\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.background;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'userVisible',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  PostTask - Priority UserBlocking Strategy\r\n *\r\n */\r\nexport function createUserBlockingStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = new Observable(subscriber => {\r\n    from(\r\n      postTaskScheduler.postTask(() => void 0, {\r\n        priority: PostTaskSchedulerPriority.userVisible,\r\n        delay: 0\r\n      })\r\n    ).subscribe(subscriber);\r\n  });\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.background;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => {\r\n    staticCoalesce(renderMethod, durationSelector, scope);\r\n    // coalesceAndSchedule(renderMethod, priority, scope);\r\n  };\r\n\r\n  return {\r\n    name: 'userBlocking',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  PostTask - Priority Background Strategy\r\n *\r\n */\r\nexport function createBackgroundStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = new Observable(subscriber => {\r\n    from(\r\n      postTaskScheduler.postTask(() => void 0, {\r\n        priority: PostTaskSchedulerPriority.userVisible,\r\n        delay: 0\r\n      })\r\n    ).subscribe(subscriber);\r\n  });\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.background;\r\n  const scheduler = getScheduler(priority);\r\n\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => {\r\n    staticCoalesce(renderMethod, durationSelector, scope);\r\n    // coalesceAndSchedule(renderMethod, priority, scope);\r\n  };\r\n  return {\r\n    name: 'background',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n\r\n/**\r\n *  IdleCallback Strategy\r\n *\r\n * This strategy is rendering the actual component and\r\n * all it's children that are on a path\r\n * that is marked as dirty or has components with `ChangeDetectionStrategy.Default`.\r\n *\r\n * As detectChanges is used the coalescing described in `ɵlocal` is implemented here.\r\n *\r\n * 'Scoped' coalescing, in addition, means **grouping the collected events by** a specific context.\r\n * E. g. the **component** from which the re-rendering was initiated.\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------ ------ | ---------------- |\r\n * | `ɵdetach`     | ✔️/✔️          | dC / ɵDC            | ✔️ + C/ LV       |\r\n *\r\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\r\n * @return {RenderStrategy<T>} - The calculated strategy\r\n *\r\n */\r\nexport function createIdleCallbackStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const durationSelector = from(getUnpatchedResolvedPromise());\r\n  const scope = (config.cdRef as any).context;\r\n  const priority = SchedulingPriority.idleCallback;\r\n  const scheduler = getScheduler(priority);\r\n  const renderMethod = () => {\r\n    config.cdRef.detectChanges();\r\n  };\r\n  const behavior = o =>\r\n    o.pipe(coalesceWith(durationSelector, scope), observeOn(scheduler));\r\n  const scheduleCD = () => coalesceAndSchedule(renderMethod, priority, scope);\r\n\r\n  return {\r\n    name: 'idleCallback',\r\n    renderMethod,\r\n    behavior,\r\n    scheduleCD\r\n  };\r\n}\r\n","import { ɵmarkDirty as markDirty } from '@angular/core';\r\nimport {\r\n  RenderStrategy,\r\n  RenderStrategyFactoryConfig\r\n} from '../../core/render-aware/interfaces';\r\n\r\nexport function getGlobalStrategies<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): { [strategy: string]: RenderStrategy<T> } {\r\n  return {\r\n    global: createGlobalStrategy<T>(config)\r\n  };\r\n}\r\n\r\n/**\r\n * Strategies\r\n *\r\n * - VE/I - Options for ViewEngine / Ivy\r\n * - mFC - `cdRef.markForCheck`\r\n * - dC - `cdRef.detectChanges`\r\n * - ɵMD - `ɵmarkDirty`\r\n * - ɵDC - `ɵdetectChanges`\r\n * - LV  - `LView`\r\n * - C - `Component`\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------------- | ---------------- |\r\n * | `global`   | ❌/✔ ️        | mFC  / ɵMD          | ❌               |\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * Global Strategy\r\n *\r\n * This strategy is rendering the application root and\r\n * all it's children that are on a path\r\n * that is marked as dirty or has components with `ChangeDetectionStrategy.Default`.\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing       |\r\n * |-------------| --------------| ------------ ------ | ---------------- |\r\n * | `global`   | ❌/✔️       | mFC / ɵMD           | ❌                |\r\n *\r\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\r\n * @return {RenderStrategy<T>} - The calculated strategy\r\n *\r\n */\r\nexport function createGlobalStrategy<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): RenderStrategy<T> {\r\n  const renderMethod = () => markDirty((config.cdRef as any).context);\r\n\r\n  return {\r\n    name: 'global',\r\n    renderMethod,\r\n    behavior: o => o,\r\n    scheduleCD: () => renderMethod()\r\n  };\r\n}\r\n","import {\r\n  RenderStrategy,\r\n  RenderStrategyFactoryConfig\r\n} from '../../core/render-aware/interfaces';\r\nimport { createNoopStrategy } from './noop.strategy';\r\nimport { createNativeStrategy } from './native.strategy';\r\nimport { getLocalStrategies } from './local.strategy';\r\nimport { getGlobalStrategies } from './global.strategy';\r\n\r\nexport const DEFAULT_STRATEGY_NAME = 'local';\r\n\r\nexport function getStrategies<T>(\r\n  config: RenderStrategyFactoryConfig\r\n): { [strategy: string]: RenderStrategy<T> } {\r\n  return {\r\n    noop: createNoopStrategy<T>(),\r\n    native: createNativeStrategy<T>(config),\r\n    ...getGlobalStrategies(config),\r\n    ...getLocalStrategies(config)\r\n  };\r\n}\r\n\r\n/**\r\n * Strategies\r\n *\r\n * - VE/I - Options for ViewEngine / Ivy\r\n * - mFC - `cdRef.markForCheck`\r\n * - dC - `cdRef.detectChanges`\r\n * - ɵMD - `ɵmarkDirty`\r\n * - ɵDC - `ɵdetectChanges`\r\n * - LV  - `LView`\r\n * - C - `Component`\r\n *\r\n * | Name        | ZoneLess VE/I | Render Method VE/I  | Coalescing VE/I  |\r\n * |-------------| --------------| ------------------- | ---------------- |\r\n * | `noop`      | ❌/❌          | no rendering        | ❌               |\r\n * | `native`    | ❌/❌          | mFC / mFC           | ❌               |\r\n * | `global`    | ❌/✔ ️       | mFC  / ɵMD           | ❌               |\r\n * | `local`     | ✔/✔ ️        | dC / ɵDC            | ✔ ️ + C/ LV     |\r\n * | `ɵglobal`   | ❌/✔ ️       | mFC  / ɵMD          | ❌               |\r\n * | `ɵlocal`    | ✔/✔ ️       | dC / ɵDC             | ✔ ️ + C/ LV     |\r\n * | `ɵdetach`   | ❌/✔ ️       | mFC  / ɵMD          | ❌               |\r\n *\r\n */\r\n","import {\r\n  ChangeDetectorRef,\r\n  OnDestroy,\r\n  Pipe,\r\n  PipeTransform\r\n} from '@angular/core';\r\nimport {\r\n  NextObserver,\r\n  Observable,\r\n  ObservableInput,\r\n  Unsubscribable\r\n} from 'rxjs';\r\nimport { RenderAware, createRenderAware } from '../core';\r\nimport { getStrategies } from '../render-strategies';\r\nimport { DEFAULT_STRATEGY_NAME } from '../render-strategies/strategies/strategies-map';\r\n\r\n/**\r\n * @Pipe PushPipe\r\n *\r\n * @description\r\n *\r\n * The `push` pipe serves as a drop-in replacement for the `async` pipe.\r\n * It contains intelligent handling of change detection to enable us\r\n * running in zone-full as well as zone-less mode without any changes to the code.\r\n *\r\n * The current way of binding an observable to the view looks like that:\r\n *  ```html\r\n *  {{observable$ | async}}\r\n * <ng-container *ngIf=\"observable$ | async as o\">{{o}}</ng-container>\r\n * <component [value]=\"observable$ | async\"></component>\r\n * ```\r\n *\r\n * The problem is `async` pipe just marks the component and all its ancestors as dirty.\r\n * It needs zone.js microtask queue to exhaust until `ApplicationRef.tick` is called to render all dirty marked\r\n *     components.\r\n *\r\n * Heavy dynamic and interactive UIs suffer from zones change detection a lot and can\r\n * lean to bad performance or even unusable applications, but the `async` pipe does not work in zone-less mode.\r\n *\r\n * `push` pipe solves that problem.\r\n *\r\n * Included Features:\r\n *  - Take observables or promises, retrieve their values and render the value to the template\r\n *  - Handling null and undefined values in a clean unified/structured way\r\n *  - Triggers change-detection differently if `zone.js` is present or not (`detectChanges` or `markForCheck`)\r\n *  - Distinct same values in a row to increase performance\r\n *  - Coalescing of change detection calls to boost performance\r\n *\r\n * @usageNotes\r\n *\r\n * `push` pipe solves that problem. It can be used like shown here:\r\n * ```html\r\n * {{observable$ | push}}\r\n * <ng-container *ngIf=\"observable$ | push as o\">{{o}}</ng-container>\r\n * <component [value]=\"observable$ | push\"></component>\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\n@Pipe({ name: 'push', pure: false })\r\nexport class PushPipe<S> implements PipeTransform, OnDestroy {\r\n  private renderedValue: S | null | undefined;\r\n\r\n  private readonly subscription: Unsubscribable;\r\n  private readonly RenderAware: RenderAware<S | null | undefined>;\r\n  private readonly resetObserver: NextObserver<void> = {\r\n    next: () => {\r\n      this.renderedValue = undefined;\r\n    }\r\n  };\r\n  private readonly updateObserver: NextObserver<S | null | undefined> = {\r\n    next: (value: S | null | undefined) => (this.renderedValue = value)\r\n  };\r\n\r\n  constructor(cdRef: ChangeDetectorRef) {\r\n    this.RenderAware = createRenderAware<S>({\r\n      strategies: getStrategies<S>({ cdRef }),\r\n      updateObserver: this.updateObserver,\r\n      resetObserver: this.resetObserver\r\n    });\r\n    this.subscription = this.RenderAware.subscribe();\r\n  }\r\n\r\n  transform<T>(\r\n    potentialObservable: null,\r\n    config?: string | Observable<string>\r\n  ): null;\r\n  transform<T>(\r\n    potentialObservable: undefined,\r\n    config?: string | Observable<string>\r\n  ): undefined;\r\n  transform<T>(\r\n    potentialObservable: ObservableInput<T>,\r\n    config?: string | Observable<string>\r\n  ): T;\r\n  transform<T>(\r\n    potentialObservable: ObservableInput<T> | null | undefined,\r\n    config: string | Observable<string> | undefined\r\n  ): T | null | undefined {\r\n    const strategy = config || DEFAULT_STRATEGY_NAME;\r\n    this.RenderAware.nextStrategy(strategy);\r\n    this.RenderAware.nextPotentialObservable(potentialObservable);\r\n    return this.renderedValue as any;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { PushPipe } from './push.pipe';\r\nconst DECLARATIONS = [PushPipe];\r\n@NgModule({\r\n  declarations: DECLARATIONS,\r\n  imports: [],\r\n  exports: DECLARATIONS\r\n})\r\nexport class PushModule {}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport {\r\n  NextObserver,\r\n  Observable,\r\n  ObservableInput,\r\n  Observer,\r\n  Unsubscribable\r\n} from 'rxjs';\r\nimport { createRenderAware, RenderAware } from '../core';\r\nimport {\r\n  DEFAULT_STRATEGY_NAME,\r\n  getStrategies\r\n} from '../render-strategies/strategies/strategies-map';\r\n\r\nexport interface LetViewContext<T> {\r\n  // to enable `let` syntax we have to use $implicit (var; let v = var)\r\n  $implicit?: T;\r\n  // to enable `as` syntax we have to assign the directives selector (var as v)\r\n  rxLet?: T;\r\n  // set context var complete to true (var$; let e = $error)\r\n  $error?: boolean;\r\n  // set context var complete to true (var$; let c = $complete)\r\n  $complete?: boolean;\r\n}\r\n\r\n/**\r\n * @Directive LetDirective\r\n *\r\n * @description\r\n *\r\n * The `*rxLet` directive serves a convenient way of binding observables to a view context (a dom element scope).\r\n * It also helps with several internal processing under the hood.\r\n *\r\n * The current way of binding an observable to the view looks like that:\r\n * ```html\r\n * <ng-container *ngIf=\"observableNumber$ as n\">\r\n * <app-number [number]=\"n\">\r\n * </app-number>\r\n * <app-number-special [number]=\"n\">\r\n * </app-number-special>\r\n * </ng-container>\r\n *  ```\r\n *\r\n *  The problem is `*ngIf` is also interfering with rendering and in case of a `0` the component would be hidden\r\n *\r\n * Included Features:\r\n * - binding is always present. (`*ngIf=\"truthy$\"`)\r\n * - it takes away the multiple usages of the `async` or `push` pipe\r\n * - a unified/structured way of handling null and undefined\r\n * - triggers change-detection differently if `zone.js` is present or not (`ChangeDetectorRef.detectChanges` or\r\n *   `ChangeDetectorRef.markForCheck`)\r\n * - triggers change-detection differently if ViewEngine or Ivy is present (`ChangeDetectorRef.detectChanges` or\r\n *   `ɵdetectChanges`)\r\n * - distinct same values in a row (distinctUntilChanged operator),\r\n *\r\n * @usageNotes\r\n *\r\n * The `*rxLet` directive take over several things and makes it more convenient and save to work with streams in the\r\n *   template\r\n * `<ng-container *rxLet=\"observableNumber$ as c\"></ng-container>`\r\n *\r\n * ```html\r\n * <ng-container *rxLet=\"observableNumber$ as n\">\r\n * <app-number [number]=\"n\">\r\n * </app-number>\r\n * </ng-container>\r\n *\r\n * <ng-container *rxLet=\"observableNumber$; let n\">\r\n * <app-number [number]=\"n\">\r\n * </app-number>\r\n * </ng-container>\r\n * ```\r\n *\r\n * In addition to that it provides us information from the whole observable context.\r\n * We can track the observables:\r\n * - next value\r\n * - error value\r\n * - complete base-state\r\n *\r\n * ```html\r\n * <ng-container *rxLet=\"observableNumber$; let n; let e = $error, let c = $complete\">\r\n * <app-number [number]=\"n\"  *ngIf=\"!e && !c\">\r\n * </app-number>\r\n * <ng-container *ngIf=\"e\">\r\n * There is an error: {{e}}\r\n * </ng-container>\r\n * <ng-container *ngIf=\"c\">\r\n * Observable completed: {{c}}\r\n * </ng-container>\r\n * </ng-container>\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\n@Directive({ selector: '[rxLet]' })\r\nexport class LetDirective<U> implements OnInit, OnDestroy {\r\n  static ngTemplateGuard_rxLet: 'binding';\r\n\r\n  @Input()\r\n  set rxLet(potentialObservable: ObservableInput<U> | null | undefined) {\r\n    this.renderAware.nextPotentialObservable(potentialObservable);\r\n  }\r\n  @Input('rxLetStrategy')\r\n  set strategy(strategy: string | Observable<string> | undefined) {\r\n    this.renderAware.nextStrategy(strategy || DEFAULT_STRATEGY_NAME);\r\n  }\r\n\r\n  readonly strategies;\r\n  private embeddedView: any;\r\n  private readonly ViewContext: LetViewContext<U | undefined | null> = {\r\n    $implicit: undefined,\r\n    rxLet: undefined,\r\n    $error: false,\r\n    $complete: false\r\n  };\r\n\r\n  protected subscription: Unsubscribable;\r\n  readonly renderAware: RenderAware<U | null | undefined>;\r\n  private readonly resetObserver: NextObserver<void> = {\r\n    next: () => {\r\n      // if not initialized no need to set undefined\r\n      if (this.embeddedView) {\r\n        this.ViewContext.$implicit = undefined;\r\n        this.ViewContext.rxLet = undefined;\r\n        this.ViewContext.$error = false;\r\n        this.ViewContext.$complete = false;\r\n      }\r\n    }\r\n  };\r\n  private readonly updateObserver: Observer<U | null | undefined> = {\r\n    next: (value: U | null | undefined) => {\r\n      // to have initial rendering lazy\r\n      if (!this.embeddedView) {\r\n        this.createEmbeddedView();\r\n      }\r\n      this.ViewContext.$implicit = value;\r\n      this.ViewContext.rxLet = value;\r\n    },\r\n    error: (error: Error) => {\r\n      // to have initial rendering lazy\r\n      if (!this.embeddedView) {\r\n        this.createEmbeddedView();\r\n      }\r\n      this.ViewContext.$error = true;\r\n    },\r\n    complete: () => {\r\n      // to have initial rendering lazy\r\n      if (!this.embeddedView) {\r\n        this.createEmbeddedView();\r\n      }\r\n      this.ViewContext.$complete = true;\r\n    }\r\n  };\r\n\r\n  static ngTemplateContextGuard<U>(\r\n    dir: LetDirective<U>,\r\n    ctx: unknown | null | undefined\r\n  ): ctx is LetViewContext<U> {\r\n    return true;\r\n  }\r\n\r\n  constructor(\r\n    cdRef: ChangeDetectorRef,\r\n    private readonly templateRef: TemplateRef<LetViewContext<U>>,\r\n    private readonly viewContainerRef: ViewContainerRef\r\n  ) {\r\n    this.strategies = getStrategies<U>({ cdRef });\r\n\r\n    this.renderAware = createRenderAware<U>({\r\n      strategies: this.strategies,\r\n      resetObserver: this.resetObserver,\r\n      updateObserver: this.updateObserver\r\n    });\r\n    this.renderAware.nextStrategy(DEFAULT_STRATEGY_NAME);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.subscription = this.renderAware.subscribe();\r\n  }\r\n\r\n  createEmbeddedView() {\r\n    this.embeddedView = this.viewContainerRef.createEmbeddedView(\r\n      this.templateRef,\r\n      this.ViewContext\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n    this.viewContainerRef.clear();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { LetDirective } from './let.directive';\r\n\r\nconst EXPORTED_DECLARATIONS = [LetDirective];\r\n\r\n@NgModule({\r\n  declarations: EXPORTED_DECLARATIONS,\r\n  exports: [EXPORTED_DECLARATIONS]\r\n})\r\nexport class LetModule {}\r\n","export const zonePatchedEvents = [\r\n  'scroll',\r\n  'mousedown',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'mousemove',\r\n  'mouseout',\r\n  'mouseover',\r\n  'mouseup',\r\n  'load',\r\n  'pointerup',\r\n  'change',\r\n  'blur',\r\n  'focus',\r\n  'click',\r\n  'contextmenu',\r\n  'drag',\r\n  'dragend',\r\n  'dragenter',\r\n  'dragleave',\r\n  'dragover',\r\n  'dragstart',\r\n  'drop',\r\n  'input'\r\n];\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { zonePatchedEvents } from './unpatch-event-list';\r\nimport { unpatchEventListener } from '../../core/utils/make-zone-less';\r\n\r\n/**\r\n * @Directive UnpatchEventsDirective\r\n *\r\n * @description\r\n *\r\n * The `unpatch` directive helps in partially migrating to zone-less apps as well as getting rid\r\n * of unnecessary renderings through zones `addEventListener` patches.\r\n * It can be used on any element you apply event bindings.\r\n *\r\n * The current way of binding events to the DOM is to use output bindings:\r\n *  ```html\r\n * <button (click)=\"doStuff($event)\">click me</button>\r\n * ```\r\n *\r\n * The problem is that every event registered over `()` syntax, e.g. `(click)`\r\n * marks the component and all its ancestors as dirty and re-renders the whole component tree.\r\n * This is because zone.js patches the native browser API and whenever one of the patched APIs is used it re-renders.\r\n *\r\n * So even if your button is not related to a change that needs a re-render the app will re-render completely.\r\n * This leads to bad performance. This is especially helpful if you work with frequently fired events like 'mousemove'\r\n *\r\n * `unpatch` directive solves that problem.\r\n *\r\n * Included Features:\r\n *  - by default un-patch all registered listeners of the host it is applied on\r\n *  - un-patch only a specified set of registered event listeners\r\n *  - works zone independent (it directly checks the widow for patched APIs and un-patches them without the use of `runOutsideZone` which brings more performance)\r\n *  - Not interfering with any logic executed by the registered callback\r\n *\r\n * @usageNotes\r\n *\r\n * The `unpatch` directive can be used like shown here:\r\n * ```html\r\n * <button [unoatch] (click)=\"triggerSomeMethod($event)\">click me</button>\r\n * <button [unoatch]=\"['mousemove']\" (mousemove)=\"doStuff2($event)\" (click)=\"doStuff($event)\">click me</button>\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({ selector: '[unpatch]' })\r\nexport class UnpatchEventsDirective implements AfterViewInit, OnDestroy {\r\n  subscription = new Subscription();\r\n  events$ = new BehaviorSubject<string[]>(zonePatchedEvents);\r\n\r\n  @Input('unpatch')\r\n  set events(value: string[]) {\r\n    if (value && value.length > 0) {\r\n      this.events$.next(value);\r\n    } else {\r\n      this.events$.next(zonePatchedEvents);\r\n    }\r\n  }\r\n\r\n  reapplyEventListenersZoneUnPatched(events) {\r\n    events.forEach(ev => {\r\n      unpatchEventListener(this.el.nativeElement, ev);\r\n    });\r\n  }\r\n\r\n  constructor(private el: ElementRef) {}\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.subscription = this.events$\r\n      .pipe(\r\n        tap(eventList => this.reapplyEventListenersZoneUnPatched(eventList))\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { UnpatchEventsDirective } from './unpatch-events.directive';\r\n\r\nconst DECLARATIONS = [UnpatchEventsDirective];\r\n@NgModule({\r\n  declarations: DECLARATIONS,\r\n  exports: DECLARATIONS\r\n})\r\nexport class UnpatchEventsModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { LetModule } from './let';\r\nimport { PushModule } from './push';\r\nimport { UnpatchEventsModule } from './unpatch/events';\r\n\r\n@NgModule({\r\n  exports: [LetModule, PushModule, UnpatchEventsModule]\r\n})\r\nexport class TemplateModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["markDirty","DECLARATIONS"],"mappings":"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"}